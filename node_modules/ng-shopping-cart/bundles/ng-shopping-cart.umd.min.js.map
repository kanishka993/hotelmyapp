{
  "version": 3,
  "file": "ng-shopping-cart.umd.min.js",
  "sources": [
    "ng://ng-shopping-cart/node_modules/tslib/tslib.es6.js",
    "ng://ng-shopping-cart/out/locales.ts",
    "ng://ng-shopping-cart/out/services/cart.service.ts",
    "ng://ng-shopping-cart/out/classes/cart-item.ts",
    "ng://ng-shopping-cart/out/components/add-to-cart/add-to-cart.component.ts",
    "ng://ng-shopping-cart/out/components/cart-checkout/cart-checkout.component.ts",
    "ng://ng-shopping-cart/out/components/cart-summary/cart-summary.component.ts",
    "ng://ng-shopping-cart/out/components/add-to-cart-editor/add-to-cart-editor.component.ts",
    "ng://ng-shopping-cart/out/components/cart-view/cart-view.component.ts",
    "ng://ng-shopping-cart/out/components/cart-showcase-item/cart-showcase-item.component.ts",
    "ng://ng-shopping-cart/out/components/cart-showcase/cart-showcase.component.ts",
    "ng://ng-shopping-cart/out/directives/showcase-outlet.ts",
    "ng://ng-shopping-cart/out/services/item-class.token.ts",
    "ng://ng-shopping-cart/out/services/service-configuration.token.ts",
    "ng://ng-shopping-cart/out/services/service-type.token.ts",
    "ng://ng-shopping-cart/out/services/memory-cart.service.ts",
    "ng://ng-shopping-cart/out/services/browser-storage-cart.service.ts",
    "ng://ng-shopping-cart/out/services/local-storage-cart.service.ts",
    "ng://ng-shopping-cart/out/services/session-storage-cart.service.ts",
    "ng://ng-shopping-cart/out/classes/base-cart-item.ts",
    "ng://ng-shopping-cart/out/service.factory.ts",
    "ng://ng-shopping-cart/out/pipes/cart-currency.pipe.ts",
    "ng://ng-shopping-cart/out/shopping-cart.module.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
    "import {LocaleFormat} from './interfaces/locale-format';\r\n\r\n/**\r\n * Converts a string into an object with all currency display options as properties.\r\n */\r\nexport function parseLocaleFormat(format: string): LocaleFormat {\r\n  if (!format) {\r\n    throw new Error('Invalid format for currency. Expected a non empty string');\r\n  }\r\n  const res: LocaleFormat = {currencyCode: undefined, display: 'symbol', digitsInfo: undefined, locale: undefined};\r\n  const props = ['currencyCode', 'display', 'digitsInfo', 'locale'];\r\n  const parts = format.split(':');\r\n  const partsLength = parts.length;\r\n\r\n  if (partsLength > 4) {\r\n    throw new Error(`Invalid format for currency. Expected a value in the form ${props.join(':')} and got ${format}`);\r\n  }\r\n\r\n  parts.forEach((p, idx) => {\r\n    let value = p;\r\n    if (value === 'auto') {\r\n      value = idx === 1 ? 'symbol' : undefined;\r\n    }\r\n    res[props[idx]] = value;\r\n  });\r\n\r\n  return res;\r\n}\r\n\r\n",
    "import {EventEmitter} from '@angular/core';\r\n\r\nimport {CartItem} from '../classes/cart-item';\r\nimport {CartChangeEvent} from '../interfaces/cart-change-event';\r\nimport {parseLocaleFormat} from '../locales';\r\nimport {LocaleFormat} from '../interfaces/locale-format';\r\n\r\n/**\r\n * The base class for storing items in your cart\r\n *\r\n * @service\r\n * @note {warning} Do not modify the items `id` after they are added to the cart. Doing so could result in duplicates which can cause\r\n * undefined behaviour\r\n * @order 1\r\n */\r\nexport abstract class CartService<T extends CartItem> {\r\n  private localeFormat: LocaleFormat = parseLocaleFormat('auto');\r\n  private format = 'auto';\r\n  /**\r\n   * Emits an event every time items, tax, shipping cost or currency formats are changed in the cart.\r\n   */\r\n  public onChange: EventEmitter<CartChangeEvent> = new EventEmitter<CartChangeEvent>();\r\n  /**\r\n   * Emits an event every time an item is added to the cart.\r\n   */\r\n  public onItemAdded: EventEmitter<T> = new EventEmitter<T>();\r\n  /**\r\n   * Emits an event every time an item is removed from the cart.\r\n   *\r\n   * > This event only fires when a single item is removed by id. If you want to be notified of any removal (eg: clearing the cart) listen\r\n   * to the `onChange` or the `onItemsChanged` event instead.\r\n   */\r\n  public onItemRemoved: EventEmitter<T> = new EventEmitter<T>();\r\n  /**\r\n   * Emits an event every time an item is added or removed from the cart.\r\n   */\r\n  public onItemsChanged: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  /**\r\n   * Emits an event every time taxes for the cart are changed.\r\n   */\r\n  public onTaxChange: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  /**\r\n   * Emits an event every time shipping costs for the cart are changed.\r\n   */\r\n  public onShippingChange: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  /**\r\n   * Finds an item by id\r\n   */\r\n  public abstract getItem(id: any): T;\r\n\r\n  /**\r\n   * Gets all the items in the cart.\r\n   */\r\n  public abstract getItems(): T[];\r\n\r\n  /**\r\n   * Add a new item to the cart.\r\n   */\r\n  public abstract addItem(item: T): void;\r\n\r\n  /**\r\n   * Remove an item from the cart by id.\r\n   */\r\n  public abstract removeItem(id: any): void;\r\n\r\n  /**\r\n   * Returns the number of unique items in the cart.\r\n   */\r\n  public abstract itemCount(): number;\r\n\r\n  /**\r\n   * Returns the number of items including each item's quantity.\r\n   */\r\n  public abstract entries(): number;\r\n\r\n  /**\r\n   * Returns the total cost of the shopping cart without shipping and taxes.\r\n   */\r\n  public abstract cost(): number;\r\n\r\n  /**\r\n   * Removes all items from the cart.\r\n   */\r\n  public abstract clear(): void;\r\n\r\n  /**\r\n   * Returns if the carts has any items in it.\r\n   */\r\n  public abstract isEmpty(): boolean;\r\n\r\n  /**\r\n   * Returns the shipping cost of the shopping cart.\r\n   */\r\n  public abstract getShipping(): number;\r\n\r\n  /**\r\n   * Sets the shipping cost of the shopping cart.\r\n   */\r\n  public abstract setShipping(shipping: number): void;\r\n\r\n  /**\r\n   * Returns the tax rate of the shopping cart.\r\n   */\r\n  public abstract getTaxRate(): number;\r\n\r\n  /**\r\n   * Sets the tax rate of the shopping cart.\r\n   */\r\n  public abstract setTaxRate(tax: number): void;\r\n\r\n  /**\r\n   * Returns the tax computation of the shopping cart.\r\n   */\r\n  public getTax(): number {\r\n    return this.cost() * (this.getTaxRate() / 100);\r\n  }\r\n\r\n  /**\r\n   * Returns the total cost of the shopping cart including shipping and taxes.\r\n   */\r\n  public totalCost(): number {\r\n    return this.cost() + this.getTax() + this.getShipping();\r\n  }\r\n\r\n  /**\r\n   * Changes the currency symbol and number format for all components associated to this service instance.\r\n   *\r\n   * Check the Angular `CurrencyPipe` and the Internationalization guide for more info.\r\n   */\r\n  public setLocaleFormat(format: string) {\r\n    this.localeFormat = parseLocaleFormat(format);\r\n    this.format = format;\r\n    this.onChange.emit({change: 'format', value: this.format});\r\n  }\r\n\r\n  /**\r\n   * Returns the currency format as set with `setCurrencyFormat` or `'auto'` if no value is set.\r\n   *\r\n   * Passing true as parameter will return an object instead of a string.\r\n   */\r\n  public getLocaleFormat(object: boolean = false): string | LocaleFormat {\r\n    return object ? this.localeFormat : this.format;\r\n  }\r\n\r\n  /**\r\n   * Returns an object with all the cart information in it, useful for serialization of the cart.\r\n   */\r\n  public toObject(): any {\r\n    return {\r\n      taxRate: this.getTaxRate(),\r\n      shipping: this.getShipping(),\r\n      items: this.getItems()\r\n    };\r\n  }\r\n}\r\n",
    "/**\r\n * The base class for every unit of information stored in the cart service\r\n * @order 1\r\n */\r\nexport abstract class CartItem {\r\n  /**\r\n   * Returns an unique identifier for your item\r\n   */\r\n  abstract getId(): any;\r\n\r\n  /**\r\n   * Returns the name, a small text describing the item\r\n   */\r\n  abstract getName(): string;\r\n\r\n  /**\r\n   * Return how much a single unit of the item costs\r\n   */\r\n  abstract getPrice(): number;\r\n\r\n  /**\r\n   * Sets how much of this item is ordered\r\n   */\r\n  abstract setQuantity(quantity: number): void;\r\n\r\n  /**\r\n   * Returns how much of this item is ordered\r\n   */\r\n  abstract getQuantity(): number;\r\n\r\n  /**\r\n   * Returns the url of an image for the item\r\n   */\r\n  abstract getImage(): string;\r\n\r\n  /**\r\n   * Return the total cost of the item, that is the price multiplied by the quantity\r\n   */\r\n  public total(): number {\r\n    return this.getPrice() * this.getQuantity();\r\n  }\r\n}\r\n\r\n\r\n",
    "import {Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges} from '@angular/core';\nimport {DropdownValue} from '../../interfaces/dropdown-value';\nimport {AddToCartPosition, AddToCartType} from '../../types';\nimport {CartService} from '../../services/cart.service';\nimport {CartItem} from '../../classes/cart-item';\n\n/**\n * A component to add items to the cart by pressing a button. Has different built-in editors to select quantity.\n *\n * @order 1\n * @howToUse \"With a custom button or projected content\"\n * ```html\n * <add-to-cart [item]=\"item\" [custom]=\"true\">\n *    <button type=\"button\" class=\"my-custom-class\">Add item</button>\n * </add-to-cart>\n * ```\n *\n * @howToUse \"With different text and classes\"\n * ```html\n * <add-to-cart [item]=\"item\" [buttonText]=\"'Add item'\" [buttonClass]=\"'my-custom-class'\">\n * </add-to-cart>\n * ```\n *\n * @howToUse \"With a html number input positioned on top\"\n * ```html\n * <add-to-cart [item]=\"item\" [type]=\"'number'\" [position]=\"'top'\">\n * </add-to-cart>\n * ```\n *\n * @howToUse \"With a select for selecting quantity\"\n * ```html\n * <add-to-cart [item]=\"item\" [type]=\"'dropdown'\" [dropdown]=\"[{ label: 'One item', value: 1 }, { label: 'Two items', value: 2 }]\">\n * </add-to-cart>\n * ```\n *\n * @howToUse \"With the default button and different quantity\"\n * ```html\n * <add-to-cart [item]=\"item\" [quantity]=\"5\">\n * </add-to-cart>\n * ```\n *\n * @note {warning} This component captures click events that bubble from its projected content if you are using `[custom]=true` therefore if\n * you have html content other than buttons inside you must stop the event propagation unless the click originated in the button that\n * add the items to the cart.\n */\n@Component({\n  selector: 'add-to-cart', // tslint:disable-line component-selector\n  template: `<div class=\"add-to-cart\" [ngClass]=\"containerClass\">\n  <div class=\"add-to-cart-component\" [ngClass]=\"position\"\n       *ngIf=\"editorPrecedence === 'before' && hasEditor\">\n    <add-to-cart-editor [type]=\"type\" [dropdown]=\"dropdown\" [(value)]=\"editorQuantity\"></add-to-cart-editor>\n  </div>\n  <div class=\"cart-button-container\" (click)=\"addToCart($event)\">\n    <ng-container *ngIf=\"!custom\">\n      <button type=\"button\" [ngClass]=\"buttonClass\" [disabled]=\"!item\">\n        {{buttonText}}\n      </button>\n    </ng-container>\n    <ng-content *ngIf=\"custom\">\n    </ng-content>\n  </div>\n  <div class=\"add-to-cart-component\" [ngClass]=\"position\"\n       *ngIf=\"editorPrecedence === 'after' && hasEditor\">\n    <add-to-cart-editor [type]=\"type\" [dropdown]=\"dropdown\" [(value)]=\"editorQuantity\"></add-to-cart-editor>\n  </div>\n</div>\n`,\n})\nexport class AddToCartComponent implements OnInit, OnChanges {\n  private _editorQuantity = 1;\n  containerClass: any;\n  hasEditor = false;\n  horizontalEditor = true;\n  editorPrecedence: 'before' | 'after' = 'before';\n  /**\n   * If `false` displays a default button provided by the component, otherwise projects the contents of the component to be used as a\n   * button.\n   */\n  @Input() custom = false;\n  /**\n   * The item that will be added to the cart on click. If no item is provided the button will be disabled unless you use custom buttons.\n   *\n   * If you specify an editor using the type input the quantity of the item might be modified prior to insertion in the service.\n   */\n  @Input() item: CartItem;\n  /**\n   * Changes the default text of the component's button.\n   */\n  @Input() buttonText = 'Add to cart';\n  /**\n   * Changes the default CSS class of the component's button.\n   */\n  @Input() buttonClass = 'add-to-cart-button';\n  /**\n   * Renders a button or a button with an editor to select the quantity of the item that will be added in the cart. When it has a value\n   * other than `'button'` an editor is displayed depending on the selected `[type]`; it can be a `select`, or a text or a number `input`.\n   *\n   * > Do not confuse this input with the html attribute `type`. The default button is always generated with this attribute set to\n   * `button` to prevent accidental form submissions.\n   */\n  @Input() type: AddToCartType = 'button';\n  /**\n   * Sets the position where the editor will be placed. If the `[type]` is set to `'button'` no editor is displayed and this setting has\n   * no effect.\n   */\n  @Input() position: AddToCartPosition = 'left';\n  /**\n   * If `[type]` is set to `'dropdown'` it can be used to set the options of the rendered `select` editor. Is an array of objects with\n   * label and a value properties used to populate the select's `option` elements.\n   */\n  @Input() dropdown: DropdownValue[] = [\n    {label: '1 item', value: 1},\n    {label: '2 items', value: 2},\n    {label: '5 items', value: 5}\n  ];\n  /**\n   * If you use this binding you can easily override the quantity that will be added to the cart when the button is clicked.\n   *\n   * > When the `[type]` is **not** set to `'button'` this binding is ignored and the value from the editor is used instead.\n   */\n  @Input() quantity: number;\n  /**\n   * This event is fired when the component uses an editor and its value is changed by the user.\n   */\n  @Output() change = new EventEmitter<number>();\n  /**\n   * This event is fired when the item is added to the cart.\n   */\n  @Output() added = new EventEmitter<CartItem>();\n\n  get editorQuantity(): number {\n    return this._editorQuantity;\n  }\n\n  set editorQuantity(value: number) {\n    this._editorQuantity = value;\n    this.change.emit(value);\n  }\n\n  constructor(private cartService: CartService<any>) {\n  }\n\n  ngOnInit(): void {\n    this.computeClass();\n  }\n\n  private itemQuantity(): number {\n    if (this.type === 'button') {\n      if (this.quantity) {\n        return this.quantity;\n      }\n      return this.item.getQuantity();\n    } else {\n      return this._editorQuantity;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['type']) {\n      this.hasEditor = changes['type'].currentValue !== 'button';\n      if (changes['type'].currentValue === 'dropdown' && this.dropdown.length) {\n        const quantity = this.itemQuantity();\n        const match = this.dropdown.find(i => i.value === quantity);\n        if (!match) {\n          this._editorQuantity = this.dropdown[0].value;\n        }\n      }\n    }\n    if (changes['position']) {\n      const pos = changes['position'].currentValue;\n      this.horizontalEditor = pos === 'left' || pos === 'right';\n      this.editorPrecedence = pos === 'left' || pos === 'top' ? 'before' : 'after';\n    }\n    this.computeClass();\n  }\n\n  addToCart(evt) {\n    evt.stopPropagation();\n    if (this.item) {\n      const quantity = this.itemQuantity();\n      this.item.setQuantity(quantity);\n      this.cartService.addItem(this.item);\n      this.added.emit(this.item);\n    }\n  }\n\n  computeClass() {\n    this.containerClass = [\n      'add-to-cart-' + this.type,\n      this.horizontalEditor ?\n        'editor-position-horizontal' :\n        'editor-position-vertical'\n    ];\n  }\n\n}\n",
    "import {Component, EventEmitter, Inject, Input, LOCALE_ID, OnChanges, OnDestroy, OnInit, Output, SimpleChanges} from '@angular/core';\nimport {CurrencyPipe, getLocaleCurrencyName} from '@angular/common';\nimport {HttpClient, HttpParams, HttpRequest} from '@angular/common/http';\n\nimport {CheckoutSettings, CheckoutType} from '../../types';\nimport {CartService} from '../../services/cart.service';\nimport {CheckoutPaypalSettings} from '../../interfaces/checkout-paypal-settings';\nimport {CheckoutHttpSettings} from '../../interfaces/checkout-http-settings';\nimport {LocaleFormat} from '../../interfaces/locale-format';\nimport {parseLocaleFormat} from '../../locales';\n\n/**\n * Renders a button to initiate checkout of the cart.\n *\n * @order 6\n * @howToUse \"With a custom button or projected content\"\n * ```html\n * <cart-checkout [custom]=\"true\">\n *    <button type=\"button\" class=\"my-custom-class\">Do checkout</button>\n * </cart-checkout>\n * ```\n *\n * @howToUse \"With different text and classes\"\n * ```html\n * <cart-checkout [buttonText]=\"'Add item'\" [buttonClass]=\"'my-custom-class'\">\n * </cart-checkout>\n * ```\n *\n * @howToUse \"Using http in a protected endpoint\"\n * ```html\n * <cart-checkout [service]=\"'http'\" settings=\"settings\">\n * </cart-checkout>\n * ```\n * ```typescript\n * export class MyComponent {\n *   settings: CheckoutHttpSettings = {\n *     method: 'POST',\n *     url: 'http://myapi.com/',\n *     options: { headers: { Authorization: 'Bearer my-auth-token' } }\n *   };\n * }\n * ```\n *\n * @howToUse \"Using the PayPal service\"\n * ```html\n * <cart-checkout [service]=\"'paypal'\" settings=\"settings\">\n * </cart-checkout>\n * ```\n * ```typescript\n * export class MyComponent {\n *  settings: CheckoutPaypalSettings = {\n *    business: 'myaccount@paypal.com',\n *    itemName: 'myMarketplaceAppCart',\n *    itemNumber: '1234',\n *    serviceName: 'MyBusiness',\n *    country: 'US'\n *  };\n * }\n * ```\n *\n * @note {warning} This component captures clicks events bubbling from its projected content. Make sure the event keeps bubbling only when\n * you want the checkout operation to start.\n *\n * @note {warning} When the `[service]` is set to `paypal` an actual PayPal button is rendered. None of the inputs `custom`, `buttonText`\n * or `buttonClass` have any effect.\n */\n@Component({\n  selector: 'cart-checkout',\n  template: `<ng-container *ngIf=\"service === 'log' || service === 'http'\">\n  <button [ngClass]=\"buttonClass\" [disabled]=\"empty\" *ngIf=\"!custom\" (click)=\"doCheckout()\">\n    {{buttonText}}\n  </button>\n  <span (click)=\"doCheckout()\" *ngIf=\"custom\">\n    <ng-content>\n    </ng-content>\n  </span>\n</ng-container>\n<ng-container *ngIf=\"service === 'paypal'\">\n  <form action=\"https://www.paypal.com/cgi-bin/webscr\" method=\"post\" target=\"_top\">\n    <input type=\"hidden\" name=\"cmd\" value=\"_xclick\"/>\n    <input type=\"hidden\" name=\"business\" value=\"{{paypalSettings.business}}\"/>\n    <input type=\"hidden\" name=\"lc\" value=\"{{paypalLocale}}\"/>\n    <input type=\"hidden\" name=\"item_name\" value=\"{{paypalSettings.itemName}}\" *ngIf=\"paypalSettings.itemName\"/>\n    <input type=\"hidden\" name=\"item_number\" value=\"{{paypalSettings.itemNumber}}\" *ngIf=\"paypalSettings.itemNumber\"/>\n    <input type=\"hidden\" name=\"amount\" value=\"{{cost}}\"/>\n    <input type=\"hidden\" name=\"currency_code\" value=\"{{currency}}\"/>\n    <input type=\"hidden\" name=\"tax_rate\" value=\"{{taxRate}}\"/>\n    <input type=\"hidden\" name=\"shipping\" value=\"{{shipping}}\"/>\n    <input type=\"hidden\" name=\"bn\" value=\"{{paypalSettings.serviceName + '_BuyNow_WPS_' + paypalSettings.country}}\"\n           *ngIf=\"paypalSettings.serviceName && paypalSettings.country\"/>\n    <input type=\"image\" src=\"https://www.paypalobjects.com/en_US/i/btn/btn_buynowCC_LG.gif\" border=\"0\" name=\"submit\"\n           alt=\"PayPal - The safer, easier way to pay online!\"/>\n    <img alt=\"\" border=\"0\" src=\"https://www.paypalobjects.com/en_US/i/scr/pixel.gif\" width=\"1\" height=\"1\"/>\n  </form>\n</ng-container>\n`,\n})\nexport class CartCheckoutComponent implements OnChanges, OnInit, OnDestroy {\n  private _serviceSubscription: any;\n  private getLocaleCurrencyName: any;\n  empty = true;\n  cost = 0;\n  taxRate = 0;\n  shipping = 0;\n  httpSettings: CheckoutHttpSettings;\n  paypalSettings: CheckoutPaypalSettings;\n  format: LocaleFormat;\n  currency = 'USD';\n  paypalLocale = 'en';\n  /**\n   * If `false` displays a default button provided by the component. When set to `true` projects the contents of the component.\n   */\n  @Input() custom = false;\n  /**\n   * Changes the default text of the component's button.\n   */\n  @Input() buttonText = 'Checkout';\n  /**\n   * Changes the default text of the component's button.\n   */\n  @Input() buttonClass = 'cart-checkout-button';\n  /**\n   * Sets the type of service to be used when initiating the checkout.\n   */\n  @Input() service: CheckoutType = 'log';\n  /**\n   * Depending on the type of the service you might need to add some configuration to it. This input allows you to change that\n   * configuration.\n   */\n  @Input() settings: CheckoutSettings = null;\n  /**\n   * Changes currency display format for the component. Overrides the value set from the service using `setCurrencyFormat`.\n   */\n  @Input() localeFormat: string;\n  /**\n   * Emits the result of the checkout operation. If the service is set to `'log'` it emits the entire cart object including tax rates and\n   * shipping info. If is set to `'http'` it emits an `HttpResponse` object with body, headers, etc as it was received by the remote server.\n   *\n   * > When `[service]` is set to `'paypal'` this event is never emitted.\n   */\n  @Output() checkout = new EventEmitter<any>();\n  /**\n   * When the `[service]` is set to `'http'` and the checkout operation fails the thrown error can be captured using this output.\n   *\n   * The emitted value is the complete `HttpErrorResponse` object returned by `HttpClient` so you can inspect other properties like status\n   * codes, headers, messages, etc.\n   */\n  @Output() error = new EventEmitter<any>();\n\n  constructor(private cartService: CartService<any>, private httpClient: HttpClient, @Inject(LOCALE_ID) private locale: string) {\n    this.getLocaleCurrencyName = getLocaleCurrencyName;\n  }\n\n  ngOnInit(): void {\n    this.updateCart(true);\n    this._serviceSubscription = this.cartService\n      .onChange\n      .subscribe((evt) => this.updateCart(evt.change === 'format'));\n  }\n\n  private updateCart(formatChange) {\n    this.empty = this.cartService.isEmpty();\n    this.cost = this.cartService.cost();\n    this.taxRate = this.cartService.getTaxRate();\n    this.shipping = this.cartService.getShipping();\n    if (formatChange) {\n      this.updateLocale();\n    }\n  }\n\n  private updateLocale() {\n    this.format = this.localeFormat ?\n      parseLocaleFormat(this.localeFormat) :\n      <LocaleFormat>this.cartService.getLocaleFormat(true);\n    const loc = this.format.locale || this.locale;\n    this.paypalLocale = loc.substring(0, 2);\n    this.currency = this.format.currencyCode || this.getCurrency(loc);\n  }\n\n  private getCurrency(locale) {\n    const currencyCode = this.getLocaleCurrencyName(locale);\n    if (!currencyCode) {\n      return 'USD';\n    }\n    if (currencyCode.length === 3) {\n      return currencyCode;\n    }\n    // Angular < 6 return \"US Dollar\" instead of \"USD\" so we have to hack the code using the currency pipe\n    // You will also get USD on locales where you should get EUR so for those versions currencyCode must be used\n    const fmt = new CurrencyPipe(locale);\n    const val = fmt.transform(0, undefined, 'code', '1.0-0', locale);\n    const pre = val.startsWith('0');\n    return val.substr(pre ? -3 : 0, 3);\n  }\n\n  doCheckout() {\n    let cart: any = this.cartService.toObject();\n    switch (this.service) {\n      case 'log':\n        console.log(cart);\n        this.checkout.emit(cart);\n        break;\n      case 'http':\n        if (!this.settings) {\n          throw new Error('Missing settings configuration');\n        }\n        const verbs = ['POST', 'PUT', 'PATCH'];\n        const {url, method = 'POST', options, body} = this.httpSettings;\n        const methodUpper = method.toUpperCase();\n        if (verbs.indexOf(methodUpper) === -1) {\n          throw new Error(`Invalid http verb found in method setting. Expected one of ${verbs.join(' ')} and got ${method}`);\n        }\n        if (body) {\n          cart = typeof body === 'function' ? body(cart) : Object.assign({}, cart, body);\n        }\n        if (options && options.headers && options.headers.has('Content-Type')) {\n          const contentType = options.headers.get('Content-Type');\n          if (contentType.startsWith('application/x-www-form-urlencoded')) {\n            cart = new HttpParams({fromObject: cart});\n          }\n        }\n        this.httpClient\n          .request(new HttpRequest(methodUpper, url, cart, options))\n          .toPromise()\n          .then(response => {\n            this.checkout.emit(response);\n          })\n          .catch(err => {\n            this.error.emit(err);\n          });\n        break;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['settings'] && changes['settings'].currentValue) {\n      const hasOwn = Object.prototype.hasOwnProperty;\n      const value = changes['settings'].currentValue;\n      if (hasOwn.call(value, 'business')) {\n        this.paypalSettings = changes['settings'].currentValue;\n      }\n      if (hasOwn.call(value, 'url')) {\n        this.httpSettings = changes['settings'].currentValue;\n      }\n    }\n    if (changes['localeFormat']) {\n      this.updateLocale();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._serviceSubscription.unsubscribe();\n  }\n}\n",
    "import {Component, OnInit, OnDestroy, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {CartService} from '../../services/cart.service';\nimport {LocaleFormat} from '../../interfaces/locale-format';\nimport {parseLocaleFormat} from '../../locales';\n\n/**\n * Renders a summary of the contents of the cart.\n *\n * @order 3\n * @howToUse \"With a different icon\"\n * ```html\n * <cart-summary [icon]=\"'http://myapi/assets/icon.svg'\"></cart-summary>\n * ```\n *\n * @howToUse \"Display different words when the cart changes\"\n * ```html\n * <cart-summary [noItemsText]=\"'Zero items'\" [oneItemText]=\"'Single item'\" [manyItemsText]=\"'Exactly # items'\"></cart-summary>\n * ```\n *\n * @howToUse \"Using always a number to display item count\"\n * ```html\n * <cart-summary [noItemsText]=\"'# items'\" [oneItemText]=\"'# items'\" [manyItemsText]=\"'# items'\"></cart-summary>\n * ```\n *\n * @note {info} Inputs that allows you to customize text also accept the special character `#` to use numbers instead of words to\n * specify quantity, for example `'# bla'` will update to `'0 bla'` or `'1 bla'` when the number of items in the cart change.\n */\n@Component({\n  selector: 'cart-summary',\n  template: `<div class=\"cart-summary\">\n  <div class=\"cart-summary-icon\">\n    <svg *ngIf=\"!icon\" version=\"1.1\" class=\"summary-icon\" xmlns=\"http://www.w3.org/2000/svg\"\n         xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 32 32\">\n      <path stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" fill=\"none\" stroke-linejoin=\"round\"\n            d=\"M2,4 L6,4 L10,20 L21,20 L25,10 L8,10 M13,10 L13,20 M18,20 L18,10 M10,15 L23,15\"/>\n      <circle fill=\"currentColor\" cx=\"11\" cy=\"24\" r=\"2\"/>\n      <circle fill=\"currentColor\" cx=\"21\" cy=\"24\" r=\"2\"/>\n    </svg>\n    <img *ngIf=\"icon\" [src]=\"icon\" class=\"summary-icon\" alt=\"cart-summary-icon\">\n  </div>\n  <div class=\"cart-summary-contents\">\n    <div class=\"cart-summary-items\">\n      {{itemsText}}\n    </div>\n    <div class=\"cart-summary-cost\">\n      {{totalCost | currency:format.currencyCode:format.display:format.digitsInfo:format.locale}}\n    </div>\n  </div>\n</div>\n`,\n})\nexport class CartSummaryComponent implements OnInit, OnChanges, OnDestroy {\n  private _serviceSubscription: any;\n  /**\n   * The url of an icon to show on the summary. Use this to replace the default icon which is an svg with the image of a shopping cart.\n   *\n   * To use the default icon when you are using the `[icon]` input just set it to a falsy value, eg: `null`, `undefined`, `''`, etc.\n   */\n  @Input() icon: string;\n  /**\n   * The text to display when there are no items in the cart.\n   */\n  @Input() noItemsText = 'No items';\n  /**\n   * The text to display when there is only one item in the cart.\n   */\n  @Input() oneItemText = 'One item';\n  /**\n   * The text to display when there are several items in the cart.\n   */\n  @Input() manyItemsText = '# items';\n  /**\n   * Changes currency display format for the component. Overrides the value set from the service using `setCurrencyFormat`.\n   */\n  @Input() localeFormat: string;\n  itemsText;\n  totalItems = 0;\n  totalCost = 0;\n  format: LocaleFormat;\n\n  constructor(private cartService: CartService<any>) {\n\n  }\n\n  private updateItemsText() {\n    let text = this.noItemsText;\n    if (this.totalItems > 0) {\n      text = this.totalItems === 1 ? this.oneItemText : this.manyItemsText;\n    }\n    this.itemsText = text.replace('#', this.totalItems.toString());\n  }\n\n  private updateComponent() {\n    this.totalItems = this.cartService.itemCount();\n    this.totalCost = !this.cartService.isEmpty() ? this.cartService.totalCost() : 0;\n    if (!this.localeFormat) {\n      this.format = <LocaleFormat>this.cartService.getLocaleFormat(true);\n    }\n    this.updateItemsText();\n  }\n\n  ngOnInit(): void {\n    this.updateComponent();\n    this._serviceSubscription = this.cartService.onChange.subscribe(() => {\n      this.updateComponent();\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['localeFormat']) {\n      this.format = this.localeFormat ?\n        parseLocaleFormat(this.localeFormat) :\n        <LocaleFormat>this.cartService.getLocaleFormat(true);\n    }\n    if (changes['noItemsText'] || changes['oneItemText'] || changes['manyItemsText']) {\n      this.updateItemsText();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._serviceSubscription.unsubscribe();\n  }\n}\n",
    "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { DropdownValue } from '../../interfaces/dropdown-value';\nimport { AddToCartType } from '../../types';\n\n/**\n * An editor to change the quantity of an item to add to the cart.\n * @ignore\n */\n@Component({\n  selector: 'add-to-cart-editor', // tslint:disable-line component-selector\n  template: `<ng-container *ngIf=\"type === 'dropdown'\">\n  <select class=\"add-to-cart-input\" #selectAmount (change)=\"changeValue(selectAmount.value)\">\n    <option [selected]=\"item.value === value\" *ngFor=\"let item of dropdown\" [value]=\"item.value\">{{item.label}}</option>\n  </select>\n</ng-container>\n<ng-container *ngIf=\"type === 'number' || type === 'text'\">\n  <input class=\"add-to-cart-input\" #inputAmount [type]=\"type\" (change)=\"changeValue(inputAmount.value)\" [value]=\"value\">\n</ng-container>\n\n`,\n})\nexport class AddToCartEditorComponent {\n  /**\n   * The type of editor to display.\n   */\n  @Input() type: AddToCartType = 'text';\n  /**\n   * A list of values to display in the dropdown editor.\n   */\n  @Input() dropdown: DropdownValue[];\n  /**\n   * The value to display in the editor\n   */\n  @Input() value = 1;\n  /**\n   * Emits a the value of the editor when the user changes it\n   */\n  @Output() valueChange = new EventEmitter<number>();\n\n  changeValue(value: any) {\n    const val = parseFloat(value);\n    this.valueChange.emit(Number.isNaN(val) ? 1 : val);\n  }\n}\n",
    "import {Component, OnInit, OnDestroy, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {CartItem} from '../../classes/cart-item';\nimport {CartService} from '../../services/cart.service';\nimport {CartViewDisplay} from '../../types';\nimport {LocaleFormat} from '../../interfaces/locale-format';\nimport {parseLocaleFormat} from '../../locales';\n\n/**\n * Renders a view of the cart.\n *\n * @order 2\n * @howToUse \"Using responsive layout\"\n * ```html\n * <cart-view [display]=\"'responsive'\">\n * </cart-view>\n * ```\n *\n * @howToUse \"No images and using scrollbars on small screens\"\n * ```html\n * <cart-view [images]=\"false\" [display]=\"'responsive-table'\">\n * </cart-view>\n * ```\n *\n * @howToUse \"Using different text for headers\"\n * ```html\n * <cart-view [emptyText]=\"headers.empty\" [nameHeaderText]=\"headers.name\" [quantityHeaderText]=\"headers.quantity\"\n *  [priceHeaderText]=\"headers.quantity\" [totalHeaderText]=\"headers.total\" [taxFooterText]=\"footers.tax\"\n *  [shippingFooterText]=\"footers.shipping\" [totalFooterText]=\"footers.total\"\n * >\n * </cart-view>\n * ```\n * ```typescript\n * export class MyComponent {\n *   headers = {\n *     empty: 'No items. Add some to the cart',\n *     name: 'Description',\n *     quantity: 'Amount',\n *     price: 'Cost',\n *     total: 'Total x item',\n *   }\n *   footers = {\n *     tax: 'Tax rate',\n *     shipping: 'Shipping cost',\n *     total: 'Total cost'\n *   }\n * }\n * ```\n *\n * @howToUse \"Change the default empty cart content\"\n * ```html\n * <cart-view [customEmptyContent]=\"true\">\n *   <div class=\"my-empty-cart-view\">\n *       <span style=\"font-size: 36px;\" class=\"glyphicon glyphicon-shopping-cart\" aria-hidden=\"true\"></span>\n *       Your cart is empty\n *   </div>\n * </cart-view>\n * ```\n */\n@Component({\n  selector: 'cart-view',\n  template: `<ng-container *ngIf=\"empty\">\r\n  <div *ngIf=\"!customEmptyContent\" class=\"cart-view-empty\">\r\n    {{emptyText}}\r\n  </div>\r\n  <ng-content *ngIf=\"customEmptyContent\"></ng-content>\r\n</ng-container>\r\n<ng-container *ngIf=\"!empty\">\r\n  <ng-container *ngIf=\"display !== 'table'\">\r\n    <div *ngIf=\"!empty\" class=\"cart-view\" [ngClass]=\"display + '-display'\">\r\n      <div class=\"cart-list-view\" [ngClass]=\"{'no-images': !images}\">\r\n        <div class=\"cart-list-header\">\r\n          <div class=\"cart-list-header-value cart-list-image-header\">\r\n          </div>\r\n          <div class=\"cart-list-header-value cart-list-name-header\">\r\n            {{nameHeaderText}}\r\n          </div>\r\n          <div class=\"cart-list-header-value cart-list-quantity-header\">\r\n            {{quantityHeaderText}}\r\n          </div>\r\n          <div class=\"cart-list-header-value cart-list-price-header\">\r\n            {{priceHeaderText}}\r\n          </div>\r\n          <div class=\"cart-list-header-value cart-list-total-header\">\r\n            {{totalHeaderText}}\r\n          </div>\r\n        </div>\r\n        <div *ngFor=\"let cartItem of items\" class=\"cart-list-item\">\r\n          <div class=\"cart-list-value cart-list-image-value\"\r\n               [ngStyle]=\"{'background-image': 'url(' + cartItem.getImage() + ')'}\">\r\n          </div>\r\n          <div class=\"cart-list-value cart-list-name-value\">\r\n            {{cartItem.getName()}}\r\n          </div>\r\n          <div class=\"cart-list-value cart-list-quantity-value\">\r\n            <button type=\"button\" class=\"cart-increase-button\" (click)=\"increase(cartItem)\">\r\n              +\r\n            </button>\r\n            <span class=\"cart-list-quantity-content\">{{cartItem.getQuantity()}}</span>\r\n            <button type=\"button\" class=\"cart-decrease-button\" (click)=\"decrease(cartItem)\">\r\n              -\r\n            </button>\r\n          </div>\r\n          <div class=\"cart-list-value cart-list-price-value\">\r\n            {{cartItem.getPrice() | currency:format.currencyCode:format.display:format.digitsInfo:format.locale}}\r\n          </div>\r\n          <div class=\"cart-list-value cart-list-total-value\">\r\n            {{cartItem.total() | currency:format.currencyCode:format.display:format.digitsInfo:format.locale}}\r\n          </div>\r\n        </div>\r\n        <div class=\"cart-list-footer\">\r\n          <div class=\"cart-list-summary\">\r\n            <div class=\"cart-empty-summary\" *ngIf=\"images\"></div>\r\n            <div class=\"cart-empty-summary\"></div>\r\n            <div class=\"cart-empty-summary\"></div>\r\n            <div class=\"cart-empty-summary\"></div>\r\n            <div class=\"cart-tax-summary\">\r\n              {{taxFooterText}}: ({{taxRate | percent:format.digitsInfo:format.locale}})\r\n              {{tax | currency:format.currencyCode:format.display:format.digitsInfo:format.locale}}\r\n            </div>\r\n          </div>\r\n          <div class=\"cart-list-summary\">\r\n            <div class=\"cart-empty-summary\" *ngIf=\"images\"></div>\r\n            <div class=\"cart-empty-summary\"></div>\r\n            <div class=\"cart-empty-summary\"></div>\r\n            <div class=\"cart-empty-summary\"></div>\r\n            <div class=\"cart-shipping-summary\">\r\n              {{shippingFooterText}}:\r\n              {{shipping | currency:format.currencyCode:format.display:format.digitsInfo:format.locale}}\r\n            </div>\r\n          </div>\r\n          <div class=\"cart-list-summary\">\r\n            <div class=\"cart-empty-summary\" *ngIf=\"images\"></div>\r\n            <div class=\"cart-empty-summary\"></div>\r\n            <div class=\"cart-empty-summary\"></div>\r\n            <div class=\"cart-empty-summary\"></div>\r\n            <div class=\"cart-total-summary\">\r\n              {{totalFooterText}}:\r\n              {{cost | currency:format.currencyCode:format.display:format.digitsInfo:format.locale}}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"display === 'table'\">\r\n    <table class=\"cart-view table-display\">\r\n      <thead class=\"cart-list-header\">\r\n      <tr>\r\n        <th class=\"cart-list-header-value cart-list-image-header\" *ngIf=\"images\"></th>\r\n        <th class=\"cart-list-header-value cart-list-name-header\">{{nameHeaderText}}</th>\r\n        <th class=\"cart-list-header-value cart-list-quantity-header\">{{quantityHeaderText}}</th>\r\n        <th class=\"cart-list-header-value cart-list-price-header\">{{priceHeaderText}}</th>\r\n        <th class=\"cart-list-header-value cart-list-total-header\">{{totalHeaderText}}</th>\r\n      </tr>\r\n      </thead>\r\n      <tbody>\r\n      <tr *ngFor=\"let cartItem of items\">\r\n        <td class=\"cart-list-value cart-list-image-value\" *ngIf=\"images\"\r\n            [ngStyle]=\"{'background-image': 'url(' + cartItem.getImage() + ')'}\">\r\n        </td>\r\n        <td class=\"cart-list-value cart-list-name-value\">{{cartItem.getName()}}</td>\r\n        <td class=\"cart-list-value cart-list-quantity-value\">\r\n          <button type=\"button\" class=\"cart-increase-button\" (click)=\"increase(cartItem)\">\r\n            +\r\n          </button>\r\n          <span class=\"cart-list-quantity-content\">{{cartItem.getQuantity()}}</span>\r\n          <button type=\"button\" class=\"cart-decrease-button\" (click)=\"decrease(cartItem)\">\r\n            -\r\n          </button>\r\n        </td>\r\n        <td class=\"cart-list-value cart-list-price-value\">\r\n          {{cartItem.getPrice() | currency:format.currencyCode:format.display:format.digitsInfo:format.locale}}\r\n        </td>\r\n        <td class=\"cart-list-value cart-list-total-value\">\r\n          {{cartItem.total() | currency:format.currencyCode:format.display:format.digitsInfo:format.locale}}\r\n        </td>\r\n      </tr>\r\n      </tbody>\r\n      <tfoot class=\"cart-list-footer\">\r\n      <tr class=\"cart-list-summary\">\r\n        <td [attr.colspan]=\"images ? 4 : 3\" class=\"cart-empty-summary\"></td>\r\n        <td class=\"cart-tax-summary\">\r\n          {{taxFooterText}}: ({{taxRate | percent:format.digitsInfo:format.locale}})\r\n          {{tax | currency:format.currencyCode:format.display:format.digitsInfo:format.locale}}\r\n        </td>\r\n      </tr>\r\n      <tr class=\"cart-list-summary\">\r\n        <td [attr.colspan]=\"images ? 4 : 3\" class=\"cart-empty-summary\"></td>\r\n        <td class=\"cart-shipping-summary\">\r\n          {{shippingFooterText}}:\r\n          {{shipping | currency:format.currencyCode:format.display:format.digitsInfo:format.locale}}\r\n        </td>\r\n      </tr>\r\n      <tr class=\"cart-list-summary\">\r\n        <td [attr.colspan]=\"images ? 4 : 3\" class=\"cart-empty-summary\"></td>\r\n        <td class=\"cart-total-summary\">\r\n          {{totalFooterText}}:\r\n          {{cost | currency:format.currencyCode:format.display:format.digitsInfo:format.locale}}\r\n        </td>\r\n      </tr>\r\n      </tfoot>\r\n    </table>\r\n  </ng-container>\r\n</ng-container>\r\n\r\n`,\n})\nexport class CartViewComponent implements OnInit, OnChanges, OnDestroy {\n  private _serviceSubscription: any;\n  /**\n   * Changes the appearance how the cart view displays in different screen sizes\n   */\n  @Input() display: CartViewDisplay = 'responsive-table';\n  /**\n   * Whether to include images in the cart or not.\n   */\n  @Input() images = true;\n  /**\n   * The text to show when the cart has no items in it.\n   */\n  @Input() emptyText = 'Your cart is empty';\n  /**\n   * When set to `true` and the cart is empty displays the projected content of the component as the empty content.\n   */\n  @Input() customEmptyContent = false;\n  /**\n   * The text to display in the header of the name column.\n   */\n  @Input() nameHeaderText = 'Name';\n  /**\n   * The text to display in the header of the quantity column.\n   */\n  @Input() quantityHeaderText = 'Quantity';\n  /**\n   * The text to display in the header of the price column.\n   */\n  @Input() priceHeaderText = 'Price';\n  /**\n   * The text to display in the header of the total per item column.\n   */\n  @Input() totalHeaderText = 'Total';\n  /**\n   * The text to display in the tax section of the footer.\n   */\n  @Input() taxFooterText = 'Tax';\n  /**\n   * The text to display in the shipping section of the footer.\n   */\n  @Input() shippingFooterText = 'Shipping';\n  /**\n   * The text to display in the total section of the footer.\n   */\n  @Input() totalFooterText = 'Total';\n  /**\n   * Changes currency display format for the component. Overrides the value set from the service using `setCurrencyFormat`.\n   */\n  @Input() localeFormat: string;\n  format: LocaleFormat;\n  empty = true;\n  items: CartItem[];\n  taxRate = 0;\n  tax = 0;\n  shipping = 0;\n  cost = 0;\n\n  constructor(private cartService: CartService<any>) {\n\n  }\n\n  update() {\n    this.empty = this.cartService.isEmpty();\n    this.items = this.cartService.getItems();\n    this.taxRate = this.cartService.getTaxRate() / 100;\n    this.tax = this.cartService.getTax();\n    this.shipping = this.cartService.getShipping();\n    this.cost = this.cartService.totalCost();\n    if (!this.localeFormat) {\n      this.format = <LocaleFormat>this.cartService.getLocaleFormat(true);\n    }\n  }\n\n  increase(item: CartItem) {\n    item.setQuantity(item.getQuantity() + 1);\n    this.cartService.addItem(item);\n  }\n\n  decrease(item: CartItem) {\n    if (item.getQuantity() > 1) {\n      item.setQuantity(item.getQuantity() - 1);\n      this.cartService.addItem(item);\n    } else {\n      this.cartService.removeItem(item.getId());\n    }\n  }\n\n  ngOnInit(): void {\n    this.update();\n    this._serviceSubscription = this.cartService.onChange.subscribe(() => {\n      this.update();\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['localeFormat']) {\n      this.format = this.localeFormat ?\n        parseLocaleFormat(this.localeFormat) :\n        <LocaleFormat>this.cartService.getLocaleFormat(true);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._serviceSubscription.unsubscribe();\n  }\n}\n",
    "import {Component} from '@angular/core';\nimport {ShowcaseItem} from '../../interfaces/showcase-item';\nimport {CartItem} from '../../classes/cart-item';\n\n/**\n * The default implementation of a showcase item.\n *\n * @note {info} This component is only intended to be used as a template for you to create your own components either by pure css\n * customization or by providing an actually working sample to serve as a guide for more complex cases.\n *\n * @order 5\n */\n@Component({\n  selector: 'cart-showcase-item',\n  template: `<div class=\"showcase-item default-sc-item\" [ngStyle]=\"{'background-image': 'url(' + item.getImage() + ')'}\">\n  <div class=\"default-sc-description\">\n    <div class=\"default-sc-name\">\n      {{item.getName()}}\n    </div>\n    <div class=\"default-sc-price\">\n      {{item.getPrice() | cartCurrency:format}}\n    </div>\n  </div>\n</div>\n`,\n})\nexport class CartShowcaseItemComponent implements ShowcaseItem {\n  /**\n   * Inherited from the interface `ShowcaseItem`\n   */\n  item: CartItem;\n  /**\n   * Inherited from the interface `ShowcaseItem`\n   */\n  format: string;\n}\n",
    "import {Component, Injector, Input, NgModuleFactory, OnChanges, OnDestroy, OnInit, SimpleChanges, Type} from '@angular/core';\nimport {CartItem} from '../../classes/cart-item';\nimport {CartShowcaseItemComponent} from '../../components/cart-showcase-item/cart-showcase-item.component';\nimport {ShowcaseItem} from '../../interfaces/showcase-item';\nimport {CartService} from '../../services/cart.service';\n\n/**\n * Renders items arranged in columns using a dynamic component for the item. Useful for getting started with e-commerce applications.\n *\n * @order 4\n * @howToUse \"Using wider items\"\n * ```html\n * <cart-showcase [items]=\"items\" [aspectRatio]=\"'2:1'\">\n * </cart-showcase>\n * ```\n *\n * @howToUse \"Using four columns in all screen sizes bigger than 768px\"\n * ```html\n * <cart-showcase [items]=\"items\" [mCols]=\"4\" [lCols]=\"4\">\n * </cart-showcase>\n * ```\n *\n * @howToUse \"Using a different item component\"\n * ```html\n * <!-- my-component.html -->\n * <cart-showcase [items]=\"items\" [itemComponent]=\"itemComponent\">\n * </cart-showcase>\n * ```\n * ```typescript\n * // my-component.ts\n * export class MyComponent {\n *   itemComponent = MyCustomItemComponent;\n * }\n *\n * // my-custom-item-component.ts\n * @Component({\n *  selector: 'my-custom-item-component',\n *  template: '<div class=\"item-class\">{{item.getName()}}</div>'\n * })\n * export class MyCustomItemComponent implements ShowcaseItem  {\n *   item: CartItem;\n * }\n *\n * // app.module.ts\n * @NgModule({\n *   // .....\n *   entryComponents: [MyCustomItemComponent],\n * })\n * export class AppModule {\n * }\n * ```\n *\n * @note {warning} If you change the `[columns]` input you must also change the sass variable that controls the component grid and\n * vice-versa. A similar procedure is required to create aspect ratios with values greater than four eg: `'1:5'`. Check the styling guide\n * for more information.\n *\n * @note {danger} The aspect ratio is the width/height proportion of the items therefore a ratio of `'2:2'` is equivalent to `'1:1'`.\n * Redundant ratios like these are removed from the source so don't try to use them.\n *\n */\n@Component({\n  selector: 'cart-showcase',\n  template: `<div class=\"cart-showcase\">\n  <div class=\"sc-item-container\" *ngFor=\"let carItem of items\"\n       [ngClass]=\"[xsClass, sClass, mClass, lClass, xlClass, ratioClass]\">\n    <div class=\"sc-item-wrapper\">\n      <ng-container\n        *cartShowcaseOutlet=\"itemComponent;item:carItem;format:format;injector:injector;ngModuleFactory:moduleFactory\">\n      </ng-container>\n    </div>\n  </div>\n</div>\n`,\n})\nexport class CartShowcaseComponent implements OnChanges, OnInit, OnDestroy {\n  private _serviceSubscription: any;\n  format: string;\n  xsClass = 'sc-container-xs-12';\n  sClass = 'sc-container-s-6';\n  mClass = 'sc-container-m-4';\n  lClass = 'sc-container-l-4';\n  xlClass = 'sc-container-xl-3';\n  ratioClass = 'sc-ratio-1-1';\n  /**\n   * The number of columns to display when the screen size matches phone devices.\n   */\n  @Input() xsCols = 1;\n  /**\n   * The number of columns to display when the screen matches tablet devices.\n   */\n  @Input() sCols = 2;\n  /**\n   * The number of columns to display when the screen matches desktop devices.\n   */\n  @Input() mCols = 3;\n  /**\n   * The number of columns to display when the screen matches large desktop devices.\n   */\n  @Input() lCols = 3;\n  /**\n   * The number of columns to display when the screen matches extra large desktop devices.\n   */\n  @Input() xlCols = 4;\n  /**\n   * The number of columns in the grid.\n   * Only update this value if you changed the columns sass variable in the library styles following the Styling guide.\n   */\n  @Input() columns = 12;\n  /**\n   * An array of items to display\n   */\n  @Input() items: CartItem[];\n  /**\n   * The component to render for each item. This type means any component that implements the interface `ShowcaseItem`.\n   */\n  @Input() itemComponent: Type<ShowcaseItem> = CartShowcaseItemComponent;\n  /**\n   * Optional injector for the dynamic item components. Used when you want to replace the default inherited injector for the component.\n   */\n  @Input() injector: Injector;\n  /**\n   * Optional module factory for the dynamic components. You usually get one when you manually compile modules.\n   */\n  @Input() moduleFactory: NgModuleFactory<any>;\n  /**\n   * The aspect ratio of the container of the items. A value of `1:1` means square items, `2:1` means two times wider, `1:2` two times\n   * taller and so on.\n   */\n  @Input() aspectRatio = '1:1';\n  /**\n   * Changes currency display format for the component. Overrides the value set from the service using `setLocaleFormat`.\n   */\n  @Input() localeFormat: string;\n\n  private getColumnSize(value) {\n    return Math.floor(this.columns / value);\n  }\n\n  constructor(private cartService: CartService<any>) {\n\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const columnProps = ['xsCols', 'sCols', 'mCols', 'lCols', 'xlCols'];\n    const classPrefix = ['xs', 's', 'm', 'l', 'xl'];\n    for (let i = 0; i < columnProps.length; i++) {\n      const prop = columnProps[i];\n      const colChanges = changes[prop];\n      if (changes['columns'] || colChanges) {\n        const prefix = classPrefix[i];\n        const size = this.getColumnSize(this[prop]);\n        this[`${prefix}Class`] = `sc-container-${prefix}-${size}`;\n      }\n    }\n    if (changes['aspectRatio']) {\n      const newRatio = changes['aspectRatio'].currentValue;\n      const values = newRatio.split(':');\n      if (values.length === 2) {\n        this.ratioClass = `sc-ratio-${values[0]}-${values[1]}`;\n      }\n    }\n    if (changes['localeFormat']) {\n      this.format = this.localeFormat || <string>this.cartService.getLocaleFormat();\n    }\n  }\n\n  ngOnInit(): void {\n    this.format = this.localeFormat || <string>this.cartService.getLocaleFormat();\n    this._serviceSubscription = this.cartService.onChange.subscribe((evt) => {\n      if (evt.change === 'format' && !this.localeFormat) {\n        this.format = <string>this.cartService.getLocaleFormat();\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this._serviceSubscription.unsubscribe();\n  }\n}\n",
    "import {\r\n  ComponentFactoryResolver, ComponentRef, Directive, Injector, Input, NgModuleFactory, NgModuleRef, OnChanges, OnDestroy, SimpleChanges,\r\n  Type, ViewContainerRef\r\n} from '@angular/core';\r\nimport {ShowcaseItem} from '../interfaces/showcase-item';\r\nimport {CartItem} from '../classes/cart-item';\r\n\r\n/**\r\n * A directive to create dynamic item components for the showcase component\r\n * @ignore\r\n */\r\n@Directive({\r\n  selector: '[cartShowcaseOutlet]',\r\n})\r\nexport class ShowcaseOutletDirective implements OnChanges, OnDestroy {\r\n  /**\r\n   * The component to render\r\n   */\r\n  @Input() cartShowcaseOutlet: Type<ShowcaseItem>;\r\n  /**\r\n   * The injector of the selected component\r\n   */\r\n  @Input() cartShowcaseOutletInjector: Injector;\r\n  /**\r\n   * The module factory of the selected component\r\n   */\r\n  @Input() cartShowcaseOutletNgModuleFactory: NgModuleFactory<any>;\r\n  /**\r\n   * The CartItem information to pass into the component\r\n   */\r\n  @Input() cartShowcaseOutletItem: CartItem;\r\n  /**\r\n   * The locale format received from the parent component\r\n   */\r\n  @Input() cartShowcaseOutletFormat: string;\r\n\r\n  private _componentRef: ComponentRef<any> | null = null;\r\n  private _moduleRef: NgModuleRef<any> | null = null;\r\n\r\n  constructor(public viewContainerRef: ViewContainerRef) {\r\n  }\r\n\r\n  private cleanModule() {\r\n    if (this._moduleRef) {\r\n      this._moduleRef.destroy();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const templateChange = Object.keys(changes).length !== 1 || !changes['cartShowcaseOutletFormat'];\r\n    if (templateChange) {\r\n      this.viewContainerRef.clear();\r\n      this._componentRef = null;\r\n\r\n      if (this.cartShowcaseOutlet) {\r\n        const elInjector = this.cartShowcaseOutletInjector || this.viewContainerRef.parentInjector;\r\n\r\n        if (changes['cartShowcaseOutletNgModuleFactory']) {\r\n          this.cleanModule();\r\n\r\n          if (this.cartShowcaseOutletNgModuleFactory) {\r\n            const parentModule = elInjector.get(NgModuleRef);\r\n            this._moduleRef = this.cartShowcaseOutletNgModuleFactory.create(parentModule.injector);\r\n          } else {\r\n            this._moduleRef = null;\r\n          }\r\n        }\r\n\r\n        const componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver :\r\n          elInjector.get(ComponentFactoryResolver);\r\n\r\n        const componentFactory =\r\n          componentFactoryResolver.resolveComponentFactory(this.cartShowcaseOutlet);\r\n\r\n        this._componentRef = this.viewContainerRef.createComponent(componentFactory, this.viewContainerRef.length, elInjector);\r\n        const instance = this._componentRef.instance;\r\n        instance.item = this.cartShowcaseOutletItem;\r\n        instance.format = this.cartShowcaseOutletFormat;\r\n      }\r\n    } else {\r\n      if (this._componentRef) {\r\n        this._componentRef.instance.format = this.cartShowcaseOutletFormat;\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.cleanModule();\r\n  }\r\n}\r\n",
    "import { InjectionToken } from '@angular/core';\r\nimport { CartItem } from '../classes/cart-item';\r\n\r\n/**\r\n * An injection token to resolve the class used to create CartItem instances\r\n */\r\nexport const CART_ITEM_CLASS = new InjectionToken<CartItem>('CartItemClass');\r\n",
    "import { InjectionToken } from '@angular/core';\r\n\r\n/**\r\n * An injection token to resolve the configuration of the cart service\r\n */\r\nexport const CART_SERVICE_CONFIGURATION = new InjectionToken<any>('CartServiceConfiguration');\r\n",
    "import {InjectionToken} from '@angular/core';\r\n\r\n/**\r\n * An injection token to store the service type entered in the `forRoot` static function. Is used to prevent errors when compiling with AOT.\r\n * @ignore\r\n *\r\n * @note {info} You can safely ignore this token if you are using custom cart services.\r\n */\r\nexport const CART_SERVICE_TYPE = new InjectionToken<any>('CartServiceType');\r\n",
    "import {CartService} from './cart.service';\r\nimport {CartItem} from '../classes/cart-item';\r\nimport {Injectable} from '@angular/core';\r\n\r\n/**\r\n * An implementation of the CartService using an in-memory array to store items\r\n * @order 2\r\n */\r\n@Injectable()\r\nexport class MemoryCartService<T extends CartItem> extends CartService<T> {\r\n  protected _items: T[] = [];\r\n  protected _taxRate = 0;\r\n  protected _shipping = 0;\r\n\r\n  protected _addItem(item: T): void {\r\n    const foundIdx = this._items.findIndex(i => i.getId() === item.getId());\r\n    if (foundIdx === -1) {\r\n      this._items.push(item);\r\n    } else {\r\n      this._items[foundIdx] = item;\r\n    }\r\n    this.onItemAdded.emit(item);\r\n    this.onItemsChanged.emit(this._items.length);\r\n    this.onChange.emit({change: 'items', value: this.getItems()});\r\n  }\r\n\r\n  protected _removeItem(id: any): void {\r\n    const idx = this._items.findIndex(i => i.getId() === id);\r\n    if (idx !== -1) {\r\n      const removed = this._items.splice(idx, 1);\r\n      this.onItemRemoved.emit(removed[0]);\r\n      this.onItemsChanged.emit(this._items.length);\r\n      this.onChange.emit({change: 'items', value: this.getItems()});\r\n    }\r\n  }\r\n\r\n  public getItem(id: any): T {\r\n    return this._items.find(i => i.getId() === id);\r\n  }\r\n\r\n  public getItems(): T[] {\r\n    return this._items.slice();\r\n  }\r\n\r\n  public itemCount(): number {\r\n    return this._items.length;\r\n  }\r\n\r\n  public entries(): number {\r\n    return this._items.reduce((curr, i) => (curr + i.getQuantity()), 0);\r\n  }\r\n\r\n  public addItem(item: T): void {\r\n    this._addItem(item);\r\n  }\r\n\r\n  public removeItem(id: any): void {\r\n    this._removeItem(id);\r\n  }\r\n\r\n  public cost(): number {\r\n    return this._items.reduce((curr, i) => (curr + i.getPrice() * i.getQuantity()), 0);\r\n  }\r\n\r\n  public clear() {\r\n    this._items = [];\r\n    this.onItemsChanged.emit(this._items.length);\r\n    this.onChange.emit({change: 'items', value: this.getItems()});\r\n  }\r\n\r\n  public getShipping(): number {\r\n    return this._shipping;\r\n  }\r\n\r\n  public setShipping(shipping: number): void {\r\n    this._shipping = shipping;\r\n    this.onShippingChange.emit(this._shipping);\r\n    this.onChange.emit({change: 'shipping', value: this._shipping});\r\n  }\r\n\r\n  public getTaxRate(): number {\r\n    return this._taxRate;\r\n  }\r\n\r\n  public setTaxRate(taxRate: number): void {\r\n    this._taxRate = taxRate;\r\n    this.onTaxChange.emit(this._taxRate);\r\n    this.onChange.emit({change: 'taxRate', value: this._taxRate});\r\n  }\r\n\r\n  public isEmpty(): boolean {\r\n    return this._items.length === 0;\r\n  }\r\n}\r\n",
    "import {Inject} from '@angular/core';\r\n\r\nimport {MemoryCartService} from './memory-cart.service';\r\nimport {CART_ITEM_CLASS} from './item-class.token';\r\nimport {CART_SERVICE_CONFIGURATION} from './service-configuration.token';\r\nimport {CartItem} from '../classes/cart-item';\r\nimport {BrowserStorageServiceConfiguration} from '../interfaces/browser-storage-service-configuration';\r\n\r\n/**\r\n * The base class for all CartService implementations that use the Storage interface of the Web Storage API like LocalStorage and\r\n * SessionStorage.\r\n * @service\r\n *\r\n * @order 3\r\n */\r\nexport abstract class BrowserStorageCartService<T extends CartItem> extends MemoryCartService<T> {\r\n  protected itemClass: any;\r\n  protected storage: Storage;\r\n  protected storageKey: string;\r\n  protected clearOnError: boolean;\r\n\r\n  constructor(\r\n    @Inject(CART_ITEM_CLASS) itemClass: CartItem,\r\n    @Inject(CART_SERVICE_CONFIGURATION) configuration: BrowserStorageServiceConfiguration\r\n  ) {\r\n    super() /* istanbul ignore next */;\r\n    this.storageKey = configuration && configuration.storageKey ? configuration.storageKey : 'NgShoppingCart';\r\n    this.clearOnError = configuration && configuration.clearOnError !== undefined ? configuration.clearOnError : true;\r\n    this.itemClass = itemClass;\r\n  }\r\n\r\n  private resetStorage(error: boolean | string | Error) {\r\n    if (this.clearOnError || !error) {\r\n      this.setTaxRate(0);\r\n      this.setShipping(0);\r\n      this.clear();\r\n      this.save();\r\n    } else {\r\n      if (typeof error === 'string') {\r\n        throw new Error(error);\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  protected save() {\r\n    this.storage.setItem(this.storageKey, JSON.stringify(this.toObject()));\r\n  }\r\n\r\n  protected restore() {\r\n    if (!this.storage.getItem(this.storageKey)) {\r\n      this.resetStorage(false);\r\n      return;\r\n    }\r\n    try {\r\n      const sc = JSON.parse(this.storage.getItem(this.storageKey));\r\n      if (!(sc.hasOwnProperty('items') && Array.isArray(sc.items) && sc.hasOwnProperty('taxRate') && sc.hasOwnProperty('shipping'))) {\r\n        this.resetStorage('The object found under the key ' + this.storageKey + ' is not a valid cart object');\r\n        return;\r\n      }\r\n      this._items = sc.items.map(i => {\r\n        if (this.itemClass.fromJSON) {\r\n          return this.itemClass.fromJSON(i);\r\n        }\r\n        return new this.itemClass(i);\r\n      });\r\n      this.setTaxRate(parseFloat(sc.taxRate));\r\n      this.setShipping(parseFloat(sc.shipping));\r\n    } catch (e) {\r\n      this.resetStorage(e);\r\n    }\r\n  }\r\n\r\n  addItem(item: T): void {\r\n    super.addItem(item);\r\n    this.save();\r\n  }\r\n\r\n  removeItem(id: any): void {\r\n    super.removeItem(id);\r\n    this.save();\r\n  }\r\n\r\n  clear(): void {\r\n    super.clear();\r\n    this.save();\r\n  }\r\n\r\n  setShipping(shipping: number): void {\r\n    super.setShipping(shipping);\r\n    this.save();\r\n  }\r\n\r\n  setTaxRate(tax: number): void {\r\n    super.setTaxRate(tax);\r\n    this.save();\r\n  }\r\n}\r\n",
    "import {Inject, Injectable} from '@angular/core';\r\nimport {CartItem} from '../classes/cart-item';\r\nimport {BrowserStorageCartService} from './browser-storage-cart.service';\r\nimport {BrowserStorageServiceConfiguration} from '../interfaces/browser-storage-service-configuration';\r\nimport {CART_ITEM_CLASS} from './item-class.token';\r\nimport {CART_SERVICE_CONFIGURATION} from './service-configuration.token';\r\n\r\n/**\r\n * An implementation of the cart service using localStorage to store items\r\n * @order 5\r\n */\r\n@Injectable()\r\nexport class LocalStorageCartService<T extends CartItem> extends BrowserStorageCartService<T> {\r\n  constructor(@Inject(CART_ITEM_CLASS) itemClass, @Inject(CART_SERVICE_CONFIGURATION) configuration: BrowserStorageServiceConfiguration) {\r\n    super(itemClass, configuration) /* istanbul ignore next */;\r\n    this.storage = window.localStorage;\r\n    this.restore();\r\n  }\r\n}\r\n",
    "import {Inject, Injectable} from '@angular/core';\r\nimport {CartItem} from '../classes/cart-item';\r\nimport {BrowserStorageCartService} from './browser-storage-cart.service';\r\nimport {BrowserStorageServiceConfiguration} from '../interfaces/browser-storage-service-configuration';\r\nimport {CART_ITEM_CLASS} from './item-class.token';\r\nimport {CART_SERVICE_CONFIGURATION} from './service-configuration.token';\r\n\r\n/**\r\n * An implementation of the cart service using sessionStorage to store items\r\n * @order 4\r\n */\r\n@Injectable()\r\nexport class SessionStorageCartService<T extends CartItem> extends BrowserStorageCartService<T> {\r\n  constructor(@Inject(CART_ITEM_CLASS) itemClass, @Inject(CART_SERVICE_CONFIGURATION) configuration: BrowserStorageServiceConfiguration) {\r\n    super(itemClass, configuration) /* istanbul ignore next */;\r\n    this.storage = window.sessionStorage;\r\n    this.restore();\r\n  }\r\n}\r\n",
    "import {CartItem} from './cart-item';\r\n\r\n/**\r\n * A default implementation for CartItem\r\n *\r\n * @order 2\r\n *\r\n * @howToUse \"Using properties and methods\"\r\n * ```typescript\r\n * const item = new BaseCartItem({id: 1, name: 'Demo'});\r\n * item.quantity = 10;\r\n * item.setQuantity(50);\r\n * console.log(item.quantity) // prints 50\r\n * ```\r\n *\r\n * @note {info} You can access item information either with direct property access or method calls, eg. `item.id === item.getId()`\r\n */\r\nexport class BaseCartItem extends CartItem {\r\n  /**\r\n   * The id of the item\r\n   */\r\n  public id: any;\r\n  /**\r\n   * The name of the item\r\n   */\r\n  public name: string;\r\n  /**\r\n   * The price of the item\r\n   */\r\n  public price: number;\r\n  /**\r\n   * The url of an image for the item\r\n   */\r\n  public image: string;\r\n  /**\r\n   * The ordered quantity of the item\r\n   */\r\n  public quantity: number;\r\n  /**\r\n   * Any additional data you want to include in the item\r\n   */\r\n  public data: any;\r\n\r\n  constructor(itemData: any = {}) {\r\n    super();\r\n    this.id = itemData.id || 0;\r\n    this.name = itemData.name || '';\r\n    this.price = itemData.price || 0;\r\n    this.image = itemData.image || '';\r\n    this.quantity = itemData.quantity || 1;\r\n    this.data = itemData.data || {};\r\n  }\r\n\r\n  /**\r\n   * Abstract base method implementation to obtain the item id\r\n   */\r\n  getId(): any {\r\n    return this.id;\r\n  }\r\n\r\n  /**\r\n   * Sets the current id for the item\r\n   * @param id {any}: The id value\r\n   */\r\n  setId(id: any): void {\r\n    this.id = id;\r\n  }\r\n\r\n  /**\r\n   * Abstract base method implementation to return the name, a small text describing the item\r\n   */\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  /**\r\n   * Sets the name of the item\r\n   */\r\n  setName(name: string): void {\r\n    this.name = name;\r\n  }\r\n\r\n  /**\r\n   * Abstract base method implementation to know how much the item cost\r\n   */\r\n  getPrice(): number {\r\n    return this.price;\r\n  }\r\n\r\n  /**\r\n   * Set the price of the item\r\n   */\r\n  setPrice(price: number): void {\r\n    this.price = price;\r\n  }\r\n\r\n  /**\r\n   * Abstract base method implementation to return how much of the item is ordered\r\n   */\r\n  getQuantity(): number {\r\n    return this.quantity;\r\n  }\r\n\r\n  /**\r\n   * Abstract base method implementation to set how much of the item is ordered\r\n   */\r\n  setQuantity(quantity: number): void {\r\n    this.quantity = quantity;\r\n  }\r\n\r\n  /**\r\n   * Abstract base method implementation to get the url of an image for the item\r\n   */\r\n  getImage(): string {\r\n    return this.image;\r\n  }\r\n\r\n  /**\r\n   * Sets the url of the item's image\r\n   */\r\n  setImage(image: string): void {\r\n    this.image = image;\r\n  }\r\n\r\n  /**\r\n   * Gets any additional data added to the item\r\n   */\r\n  getData(): any {\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Sets any additional data to the item\r\n   */\r\n  setData(data: any): void {\r\n    this.data = data;\r\n  }\r\n}\r\n",
    "import {LocalStorageCartService} from './services/local-storage-cart.service';\r\nimport {MemoryCartService} from './services/memory-cart.service';\r\nimport {CartItem} from './classes/cart-item';\r\nimport {SessionStorageCartService} from './services/session-storage-cart.service';\r\nimport {BaseCartItem} from './classes/base-cart-item';\r\nimport {Provider} from '@angular/core';\r\nimport {CART_ITEM_CLASS} from './services/item-class.token';\r\nimport {CART_SERVICE_TYPE} from './services/service-type.token';\r\nimport {CART_SERVICE_CONFIGURATION} from './services/service-configuration.token';\r\nimport {CartService} from './services/cart.service';\r\n\r\nexport function serviceFactory<T extends CartItem>(serviceType, itemClass, configuration): CartService<T> {\r\n  switch (serviceType) {\r\n    case 'localStorage':\r\n      return new LocalStorageCartService<T>(itemClass, configuration);\r\n    case 'sessionStorage':\r\n      return new SessionStorageCartService<T>(itemClass, configuration);\r\n    default:\r\n      return new MemoryCartService<T>();\r\n  }\r\n}\r\n\r\nexport function setupService(serviceType): Provider {\r\n  return {\r\n    provide: CART_SERVICE_TYPE,\r\n    useValue: serviceType || 'localStorage'\r\n  };\r\n}\r\n\r\nexport function setItemClass(itemClass): Provider {\r\n  return {\r\n    provide: CART_ITEM_CLASS,\r\n    useValue: itemClass || BaseCartItem\r\n  };\r\n}\r\n\r\nexport function setServiceConfiguration(serviceType, serviceOptions): Provider {\r\n  return {\r\n    provide: CART_SERVICE_CONFIGURATION,\r\n    useValue: serviceType !== 'memory' ? (!serviceOptions ? {\r\n      storageKey: 'NgShoppingCart',\r\n      clearOnError: true\r\n    } : serviceOptions) : null\r\n  };\r\n}\r\n\r\n\r\n",
    "import {Inject, LOCALE_ID, Pipe, PipeTransform} from '@angular/core';\r\nimport {CurrencyPipe} from '@angular/common';\r\nimport {parseLocaleFormat} from '../locales';\r\n\r\n/**\r\n * A pipe that wraps the `CurrencyPipe` to set currency value display using a string rather than several arguments for easy configuration.\r\n *\r\n * @summary\r\n * It takes a string as a single parameter in the format `'currencyCode:symbol:digitsInfo:locale'`. You can also use the special\r\n * value `'auto'` which will set the default used by Angular in that specific configuration.\r\n *\r\n * Every configuration is optional and not using any arguments or an argument of `'auto'`is equivalent to how the `CurrencyPipe` works by\r\n * default. If no locale is specified uses the current locale to format numbers.\r\n *\r\n * @note {info} A value of `'auto:auto:auto:auto'` is equivalent to simply using `'auto'`.\r\n *\r\n * @note {danger} In Angular versions lower than 6 the `CurrencyPipe` does not change the currency symbol if you don't specify a different\r\n * `currencyCode`\r\n *\r\n * @howToUse \"With a different currency symbol\"\r\n * ```html\r\n * <span>\r\n *   {{ value | cartCurrency:format }}\r\n * </span>\r\n * ```\r\n * ```typescript\r\n * export class MyComponent {\r\n *   value = 10;\r\n *   format = 'EUR';\r\n * }\r\n * ```\r\n *\r\n * @howToUse \"With a five digits after the decimal point\"\r\n * ```html\r\n * <span>\r\n *   {{ value | cartCurrency:format }}\r\n * </span>\r\n * ```\r\n * ```typescript\r\n * export class MyComponent {\r\n *   value = 10.56;\r\n *   format = 'auto:auto:1.5-5';\r\n * }\r\n * ```\r\n *\r\n * @howToUse \"With a different locale\"\r\n * ```html\r\n * <span>\r\n *   {{ value | cartCurrency:format }}\r\n * </span>\r\n * ```\r\n * ```typescript\r\n * export class MyComponent {\r\n *   value = 10;\r\n *   format = 'auto:auto:auto:en-GB';\r\n * }\r\n * ```\r\n */\r\n@Pipe({name: 'cartCurrency'})\r\nexport class CartCurrencyPipe implements PipeTransform {\r\n  private currencyFormatter;\r\n\r\n  constructor(@Inject(LOCALE_ID) private _locale: string) {\r\n    this.currencyFormatter = new CurrencyPipe(this._locale);\r\n  }\r\n\r\n  transform(value: any, format: string = 'auto') {\r\n    if (!value && value !== 0) {\r\n      return null;\r\n    }\r\n    const {currencyCode, display, digitsInfo, locale} = parseLocaleFormat(format);\r\n    return this.currencyFormatter.transform(value, currencyCode, display, digitsInfo, locale);\r\n  }\r\n}\r\n",
    "import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {HttpClientModule} from '@angular/common/http';\r\n\r\nimport {AddToCartComponent} from './components/add-to-cart/add-to-cart.component';\r\nimport {AddToCartEditorComponent} from './components/add-to-cart-editor/add-to-cart-editor.component';\r\nimport {CartCheckoutComponent} from './components/cart-checkout/cart-checkout.component';\r\nimport {CartSummaryComponent} from './components/cart-summary/cart-summary.component';\r\nimport {CartViewComponent} from './components/cart-view/cart-view.component';\r\nimport {CartService} from './services/cart.service';\r\nimport {CartShowcaseComponent} from './components/cart-showcase/cart-showcase.component';\r\nimport {ShowcaseOutletDirective} from './directives/showcase-outlet';\r\nimport {CartShowcaseItemComponent} from './components/cart-showcase-item/cart-showcase-item.component';\r\nimport {CartModuleOptions} from './interfaces/cart-module-options';\r\nimport {CART_ITEM_CLASS} from './services/item-class.token';\r\nimport {CART_SERVICE_CONFIGURATION} from './services/service-configuration.token';\r\nimport {CART_SERVICE_TYPE} from './services/service-type.token';\r\nimport {serviceFactory, setItemClass, setServiceConfiguration, setupService} from './service.factory';\r\nimport {CartCurrencyPipe} from './pipes/cart-currency.pipe';\r\n\r\n/**\r\n * The main exported library module. It includes `forRoot` and `forChild` static methods to support angular feature modules and singleton\r\n * services.\r\n *\r\n * @note {danger} Only the `forRoot` method will configure providers for you. If you use the module without it you must configure the\r\n * library providers yourself.\r\n */\r\n@NgModule({\r\n  declarations: [\r\n    AddToCartEditorComponent,\r\n    AddToCartComponent,\r\n    CartCheckoutComponent,\r\n    CartSummaryComponent,\r\n    CartShowcaseComponent,\r\n    CartViewComponent,\r\n    ShowcaseOutletDirective,\r\n    CartShowcaseItemComponent,\r\n    CartCurrencyPipe,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n  ],\r\n  exports: [\r\n    AddToCartEditorComponent,\r\n    AddToCartComponent,\r\n    CartCheckoutComponent,\r\n    CartSummaryComponent,\r\n    CartShowcaseComponent,\r\n    CartViewComponent,\r\n    CartShowcaseItemComponent,\r\n    CartCurrencyPipe,\r\n    CommonModule,\r\n    HttpClientModule\r\n  ],\r\n  entryComponents: [CartShowcaseItemComponent],\r\n})\r\nexport class ShoppingCartModule {\r\n  static forRoot(options: CartModuleOptions = {}): ModuleWithProviders {\r\n    return {\r\n      ngModule: ShoppingCartModule,\r\n      providers: [\r\n        setItemClass(options.itemType),\r\n        setupService(options.serviceType),\r\n        setServiceConfiguration(options.serviceType, options.serviceOptions),\r\n        {\r\n          provide: CartService,\r\n          useFactory: serviceFactory,\r\n          deps: [CART_SERVICE_TYPE, CART_ITEM_CLASS, CART_SERVICE_CONFIGURATION]\r\n        }\r\n      ],\r\n    };\r\n  }\r\n\r\n  static forChild(): ModuleWithProviders {\r\n    return {\r\n      ngModule: ShoppingCartModule\r\n    };\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n"
  ],
  "names": [
    "extendStatics",
    "Object",
    "setPrototypeOf",
    "__proto__",
    "Array",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__extends",
    "__",
    "this",
    "constructor",
    "prototype",
    "create",
    "__read",
    "o",
    "n",
    "m",
    "Symbol",
    "iterator",
    "r",
    "e",
    "i",
    "call",
    "ar",
    "next",
    "done",
    "push",
    "value",
    "error",
    "parseLocaleFormat",
    "format",
    "Error",
    "res",
    "currencyCode",
    "undefined",
    "display",
    "digitsInfo",
    "locale",
    "props",
    "parts",
    "split",
    "length",
    "join",
    "forEach",
    "idx",
    "CartService",
    "localeFormat",
    "onChange",
    "EventEmitter",
    "onItemAdded",
    "onItemRemoved",
    "onItemsChanged",
    "onTaxChange",
    "onShippingChange",
    "getTax",
    "cost",
    "getTaxRate",
    "totalCost",
    "getShipping",
    "setLocaleFormat",
    "emit",
    "change",
    "getLocaleFormat",
    "object",
    "toObject",
    "taxRate",
    "shipping",
    "items",
    "getItems",
    "CartItem",
    "total",
    "getPrice",
    "getQuantity",
    "AddToCartComponent",
    "cartService",
    "_editorQuantity",
    "hasEditor",
    "horizontalEditor",
    "editorPrecedence",
    "custom",
    "buttonText",
    "buttonClass",
    "type",
    "position",
    "dropdown",
    "label",
    "added",
    "defineProperty",
    "get",
    "set",
    "ngOnInit",
    "computeClass",
    "itemQuantity",
    "quantity",
    "item",
    "ngOnChanges",
    "changes",
    "currentValue",
    "quantity_1",
    "find",
    "pos",
    "addToCart",
    "evt",
    "stopPropagation",
    "setQuantity",
    "addItem",
    "containerClass",
    "Component",
    "args",
    "selector",
    "template",
    "Input",
    "Output",
    "CartCheckoutComponent",
    "httpClient",
    "empty",
    "currency",
    "paypalLocale",
    "service",
    "settings",
    "checkout",
    "getLocaleCurrencyName",
    "_this",
    "updateCart",
    "_serviceSubscription",
    "subscribe",
    "formatChange",
    "isEmpty",
    "updateLocale",
    "loc",
    "substring",
    "getCurrency",
    "val",
    "CurrencyPipe",
    "transform",
    "pre",
    "startsWith",
    "substr",
    "doCheckout",
    "cart",
    "console",
    "log",
    "verbs",
    "_a",
    "httpSettings",
    "url",
    "_b",
    "method",
    "options",
    "body",
    "methodUpper",
    "toUpperCase",
    "indexOf",
    "assign",
    "headers",
    "has",
    "HttpParams",
    "fromObject",
    "request",
    "HttpRequest",
    "toPromise",
    "then",
    "response",
    "catch",
    "err",
    "hasOwn",
    "paypalSettings",
    "ngOnDestroy",
    "unsubscribe",
    "HttpClient",
    "decorators",
    "Inject",
    "LOCALE_ID",
    "CartSummaryComponent",
    "noItemsText",
    "oneItemText",
    "manyItemsText",
    "totalItems",
    "updateItemsText",
    "text",
    "itemsText",
    "replace",
    "toString",
    "updateComponent",
    "itemCount",
    "icon",
    "AddToCartEditorComponent",
    "valueChange",
    "changeValue",
    "parseFloat",
    "Number",
    "isNaN",
    "CartViewComponent",
    "images",
    "emptyText",
    "customEmptyContent",
    "nameHeaderText",
    "quantityHeaderText",
    "priceHeaderText",
    "totalHeaderText",
    "taxFooterText",
    "shippingFooterText",
    "totalFooterText",
    "tax",
    "update",
    "increase",
    "decrease",
    "removeItem",
    "getId",
    "CartShowcaseItemComponent",
    "CartShowcaseComponent",
    "xsClass",
    "sClass",
    "mClass",
    "lClass",
    "xlClass",
    "ratioClass",
    "xsCols",
    "sCols",
    "mCols",
    "lCols",
    "xlCols",
    "columns",
    "itemComponent",
    "aspectRatio",
    "getColumnSize",
    "Math",
    "floor",
    "columnProps",
    "classPrefix",
    "prop",
    "colChanges",
    "prefix",
    "size",
    "values",
    "injector",
    "moduleFactory",
    "ShowcaseOutletDirective",
    "viewContainerRef",
    "_componentRef",
    "_moduleRef",
    "cleanModule",
    "destroy",
    "keys",
    "clear",
    "cartShowcaseOutlet",
    "elInjector",
    "cartShowcaseOutletInjector",
    "parentInjector",
    "cartShowcaseOutletNgModuleFactory",
    "parentModule",
    "NgModuleRef",
    "componentFactory",
    "componentFactoryResolver",
    "ComponentFactoryResolver",
    "resolveComponentFactory",
    "createComponent",
    "instance",
    "cartShowcaseOutletItem",
    "cartShowcaseOutletFormat",
    "Directive",
    "ViewContainerRef",
    "CART_ITEM_CLASS",
    "InjectionToken",
    "CART_SERVICE_CONFIGURATION",
    "CART_SERVICE_TYPE",
    "MemoryCartService",
    "_super",
    "arguments",
    "concat",
    "_items",
    "_taxRate",
    "_shipping",
    "tslib_1.__extends",
    "_addItem",
    "foundIdx",
    "findIndex",
    "_removeItem",
    "id",
    "removed",
    "splice",
    "getItem",
    "slice",
    "entries",
    "reduce",
    "curr",
    "setShipping",
    "setTaxRate",
    "Injectable",
    "BrowserStorageCartService",
    "itemClass",
    "configuration",
    "storageKey",
    "clearOnError",
    "resetStorage",
    "save",
    "storage",
    "setItem",
    "JSON",
    "stringify",
    "restore",
    "sc",
    "parse",
    "isArray",
    "map",
    "fromJSON",
    "LocalStorageCartService",
    "window",
    "localStorage",
    "SessionStorageCartService",
    "sessionStorage",
    "BaseCartItem",
    "itemData",
    "name",
    "price",
    "image",
    "data",
    "setId",
    "getName",
    "setName",
    "setPrice",
    "getImage",
    "setImage",
    "getData",
    "setData",
    "serviceFactory",
    "serviceType",
    "setupService",
    "provide",
    "useValue",
    "setItemClass",
    "setServiceConfiguration",
    "serviceOptions",
    "CartCurrencyPipe",
    "_locale",
    "currencyFormatter",
    "Pipe",
    "ShoppingCartModule",
    "forRoot",
    "ngModule",
    "providers",
    "itemType",
    "useFactory",
    "deps",
    "forChild",
    "NgModule",
    "declarations",
    "imports",
    "CommonModule",
    "HttpClientModule",
    "exports",
    "entryComponents"
  ],
  "mappings": "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"
}
