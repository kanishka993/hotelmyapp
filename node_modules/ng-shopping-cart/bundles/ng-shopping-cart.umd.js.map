{
  "version": 3,
  "file": "ng-shopping-cart.umd.js",
  "sources": [
    "ng://ng-shopping-cart/out/shopping-cart.module.ts",
    "ng://ng-shopping-cart/out/pipes/cart-currency.pipe.ts",
    "ng://ng-shopping-cart/out/service.factory.ts",
    "ng://ng-shopping-cart/out/classes/base-cart-item.ts",
    "ng://ng-shopping-cart/out/services/session-storage-cart.service.ts",
    "ng://ng-shopping-cart/out/services/local-storage-cart.service.ts",
    "ng://ng-shopping-cart/out/services/browser-storage-cart.service.ts",
    "ng://ng-shopping-cart/out/services/memory-cart.service.ts",
    "ng://ng-shopping-cart/out/services/service-type.token.ts",
    "ng://ng-shopping-cart/out/services/service-configuration.token.ts",
    "ng://ng-shopping-cart/out/services/item-class.token.ts",
    "ng://ng-shopping-cart/out/directives/showcase-outlet.ts",
    "ng://ng-shopping-cart/out/components/cart-showcase/cart-showcase.component.ts",
    "ng://ng-shopping-cart/out/components/cart-showcase-item/cart-showcase-item.component.ts",
    "ng://ng-shopping-cart/out/components/cart-view/cart-view.component.ts",
    "ng://ng-shopping-cart/out/components/add-to-cart-editor/add-to-cart-editor.component.ts",
    "ng://ng-shopping-cart/out/components/cart-summary/cart-summary.component.ts",
    "ng://ng-shopping-cart/out/components/cart-checkout/cart-checkout.component.ts",
    "ng://ng-shopping-cart/out/components/add-to-cart/add-to-cart.component.ts",
    "ng://ng-shopping-cart/out/classes/cart-item.ts",
    "ng://ng-shopping-cart/out/services/cart.service.ts",
    "ng://ng-shopping-cart/out/locales.ts",
    "ng://ng-shopping-cart/node_modules/tslib/tslib.es6.js"
  ],
  "sourcesContent": [
    "import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {HttpClientModule} from '@angular/common/http';\r\n\r\nimport {AddToCartComponent} from './components/add-to-cart/add-to-cart.component';\r\nimport {AddToCartEditorComponent} from './components/add-to-cart-editor/add-to-cart-editor.component';\r\nimport {CartCheckoutComponent} from './components/cart-checkout/cart-checkout.component';\r\nimport {CartSummaryComponent} from './components/cart-summary/cart-summary.component';\r\nimport {CartViewComponent} from './components/cart-view/cart-view.component';\r\nimport {CartService} from './services/cart.service';\r\nimport {CartShowcaseComponent} from './components/cart-showcase/cart-showcase.component';\r\nimport {ShowcaseOutletDirective} from './directives/showcase-outlet';\r\nimport {CartShowcaseItemComponent} from './components/cart-showcase-item/cart-showcase-item.component';\r\nimport {CartModuleOptions} from './interfaces/cart-module-options';\r\nimport {CART_ITEM_CLASS} from './services/item-class.token';\r\nimport {CART_SERVICE_CONFIGURATION} from './services/service-configuration.token';\r\nimport {CART_SERVICE_TYPE} from './services/service-type.token';\r\nimport {serviceFactory, setItemClass, setServiceConfiguration, setupService} from './service.factory';\r\nimport {CartCurrencyPipe} from './pipes/cart-currency.pipe';\r\n\r\n/**\r\n * The main exported library module. It includes `forRoot` and `forChild` static methods to support angular feature modules and singleton\r\n * services.\r\n *\r\n * @note {danger} Only the `forRoot` method will configure providers for you. If you use the module without it you must configure the\r\n * library providers yourself.\r\n */\r\n@NgModule({\r\n  declarations: [\r\n    AddToCartEditorComponent,\r\n    AddToCartComponent,\r\n    CartCheckoutComponent,\r\n    CartSummaryComponent,\r\n    CartShowcaseComponent,\r\n    CartViewComponent,\r\n    ShowcaseOutletDirective,\r\n    CartShowcaseItemComponent,\r\n    CartCurrencyPipe,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n  ],\r\n  exports: [\r\n    AddToCartEditorComponent,\r\n    AddToCartComponent,\r\n    CartCheckoutComponent,\r\n    CartSummaryComponent,\r\n    CartShowcaseComponent,\r\n    CartViewComponent,\r\n    CartShowcaseItemComponent,\r\n    CartCurrencyPipe,\r\n    CommonModule,\r\n    HttpClientModule\r\n  ],\r\n  entryComponents: [CartShowcaseItemComponent],\r\n})\r\nexport class ShoppingCartModule {\r\n  static forRoot(options: CartModuleOptions = {}): ModuleWithProviders {\r\n    return {\r\n      ngModule: ShoppingCartModule,\r\n      providers: [\r\n        setItemClass(options.itemType),\r\n        setupService(options.serviceType),\r\n        setServiceConfiguration(options.serviceType, options.serviceOptions),\r\n        {\r\n          provide: CartService,\r\n          useFactory: serviceFactory,\r\n          deps: [CART_SERVICE_TYPE, CART_ITEM_CLASS, CART_SERVICE_CONFIGURATION]\r\n        }\r\n      ],\r\n    };\r\n  }\r\n\r\n  static forChild(): ModuleWithProviders {\r\n    return {\r\n      ngModule: ShoppingCartModule\r\n    };\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n",
    "import {Inject, LOCALE_ID, Pipe, PipeTransform} from '@angular/core';\r\nimport {CurrencyPipe} from '@angular/common';\r\nimport {parseLocaleFormat} from '../locales';\r\n\r\n/**\r\n * A pipe that wraps the `CurrencyPipe` to set currency value display using a string rather than several arguments for easy configuration.\r\n *\r\n * @summary\r\n * It takes a string as a single parameter in the format `'currencyCode:symbol:digitsInfo:locale'`. You can also use the special\r\n * value `'auto'` which will set the default used by Angular in that specific configuration.\r\n *\r\n * Every configuration is optional and not using any arguments or an argument of `'auto'`is equivalent to how the `CurrencyPipe` works by\r\n * default. If no locale is specified uses the current locale to format numbers.\r\n *\r\n * @note {info} A value of `'auto:auto:auto:auto'` is equivalent to simply using `'auto'`.\r\n *\r\n * @note {danger} In Angular versions lower than 6 the `CurrencyPipe` does not change the currency symbol if you don't specify a different\r\n * `currencyCode`\r\n *\r\n * @howToUse \"With a different currency symbol\"\r\n * ```html\r\n * <span>\r\n *   {{ value | cartCurrency:format }}\r\n * </span>\r\n * ```\r\n * ```typescript\r\n * export class MyComponent {\r\n *   value = 10;\r\n *   format = 'EUR';\r\n * }\r\n * ```\r\n *\r\n * @howToUse \"With a five digits after the decimal point\"\r\n * ```html\r\n * <span>\r\n *   {{ value | cartCurrency:format }}\r\n * </span>\r\n * ```\r\n * ```typescript\r\n * export class MyComponent {\r\n *   value = 10.56;\r\n *   format = 'auto:auto:1.5-5';\r\n * }\r\n * ```\r\n *\r\n * @howToUse \"With a different locale\"\r\n * ```html\r\n * <span>\r\n *   {{ value | cartCurrency:format }}\r\n * </span>\r\n * ```\r\n * ```typescript\r\n * export class MyComponent {\r\n *   value = 10;\r\n *   format = 'auto:auto:auto:en-GB';\r\n * }\r\n * ```\r\n */\r\n@Pipe({name: 'cartCurrency'})\r\nexport class CartCurrencyPipe implements PipeTransform {\r\n  private currencyFormatter;\r\n\r\n  constructor(@Inject(LOCALE_ID) private _locale: string) {\r\n    this.currencyFormatter = new CurrencyPipe(this._locale);\r\n  }\r\n\r\n  transform(value: any, format: string = 'auto') {\r\n    if (!value && value !== 0) {\r\n      return null;\r\n    }\r\n    const {currencyCode, display, digitsInfo, locale} = parseLocaleFormat(format);\r\n    return this.currencyFormatter.transform(value, currencyCode, display, digitsInfo, locale);\r\n  }\r\n}\r\n",
    "import {LocalStorageCartService} from './services/local-storage-cart.service';\r\nimport {MemoryCartService} from './services/memory-cart.service';\r\nimport {CartItem} from './classes/cart-item';\r\nimport {SessionStorageCartService} from './services/session-storage-cart.service';\r\nimport {BaseCartItem} from './classes/base-cart-item';\r\nimport {Provider} from '@angular/core';\r\nimport {CART_ITEM_CLASS} from './services/item-class.token';\r\nimport {CART_SERVICE_TYPE} from './services/service-type.token';\r\nimport {CART_SERVICE_CONFIGURATION} from './services/service-configuration.token';\r\nimport {CartService} from './services/cart.service';\r\n\r\nexport function serviceFactory<T extends CartItem>(serviceType, itemClass, configuration): CartService<T> {\r\n  switch (serviceType) {\r\n    case 'localStorage':\r\n      return new LocalStorageCartService<T>(itemClass, configuration);\r\n    case 'sessionStorage':\r\n      return new SessionStorageCartService<T>(itemClass, configuration);\r\n    default:\r\n      return new MemoryCartService<T>();\r\n  }\r\n}\r\n\r\nexport function setupService(serviceType): Provider {\r\n  return {\r\n    provide: CART_SERVICE_TYPE,\r\n    useValue: serviceType || 'localStorage'\r\n  };\r\n}\r\n\r\nexport function setItemClass(itemClass): Provider {\r\n  return {\r\n    provide: CART_ITEM_CLASS,\r\n    useValue: itemClass || BaseCartItem\r\n  };\r\n}\r\n\r\nexport function setServiceConfiguration(serviceType, serviceOptions): Provider {\r\n  return {\r\n    provide: CART_SERVICE_CONFIGURATION,\r\n    useValue: serviceType !== 'memory' ? (!serviceOptions ? {\r\n      storageKey: 'NgShoppingCart',\r\n      clearOnError: true\r\n    } : serviceOptions) : null\r\n  };\r\n}\r\n\r\n\r\n",
    "import {CartItem} from './cart-item';\r\n\r\n/**\r\n * A default implementation for CartItem\r\n *\r\n * @order 2\r\n *\r\n * @howToUse \"Using properties and methods\"\r\n * ```typescript\r\n * const item = new BaseCartItem({id: 1, name: 'Demo'});\r\n * item.quantity = 10;\r\n * item.setQuantity(50);\r\n * console.log(item.quantity) // prints 50\r\n * ```\r\n *\r\n * @note {info} You can access item information either with direct property access or method calls, eg. `item.id === item.getId()`\r\n */\r\nexport class BaseCartItem extends CartItem {\r\n  /**\r\n   * The id of the item\r\n   */\r\n  public id: any;\r\n  /**\r\n   * The name of the item\r\n   */\r\n  public name: string;\r\n  /**\r\n   * The price of the item\r\n   */\r\n  public price: number;\r\n  /**\r\n   * The url of an image for the item\r\n   */\r\n  public image: string;\r\n  /**\r\n   * The ordered quantity of the item\r\n   */\r\n  public quantity: number;\r\n  /**\r\n   * Any additional data you want to include in the item\r\n   */\r\n  public data: any;\r\n\r\n  constructor(itemData: any = {}) {\r\n    super();\r\n    this.id = itemData.id || 0;\r\n    this.name = itemData.name || '';\r\n    this.price = itemData.price || 0;\r\n    this.image = itemData.image || '';\r\n    this.quantity = itemData.quantity || 1;\r\n    this.data = itemData.data || {};\r\n  }\r\n\r\n  /**\r\n   * Abstract base method implementation to obtain the item id\r\n   */\r\n  getId(): any {\r\n    return this.id;\r\n  }\r\n\r\n  /**\r\n   * Sets the current id for the item\r\n   * @param id {any}: The id value\r\n   */\r\n  setId(id: any): void {\r\n    this.id = id;\r\n  }\r\n\r\n  /**\r\n   * Abstract base method implementation to return the name, a small text describing the item\r\n   */\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  /**\r\n   * Sets the name of the item\r\n   */\r\n  setName(name: string): void {\r\n    this.name = name;\r\n  }\r\n\r\n  /**\r\n   * Abstract base method implementation to know how much the item cost\r\n   */\r\n  getPrice(): number {\r\n    return this.price;\r\n  }\r\n\r\n  /**\r\n   * Set the price of the item\r\n   */\r\n  setPrice(price: number): void {\r\n    this.price = price;\r\n  }\r\n\r\n  /**\r\n   * Abstract base method implementation to return how much of the item is ordered\r\n   */\r\n  getQuantity(): number {\r\n    return this.quantity;\r\n  }\r\n\r\n  /**\r\n   * Abstract base method implementation to set how much of the item is ordered\r\n   */\r\n  setQuantity(quantity: number): void {\r\n    this.quantity = quantity;\r\n  }\r\n\r\n  /**\r\n   * Abstract base method implementation to get the url of an image for the item\r\n   */\r\n  getImage(): string {\r\n    return this.image;\r\n  }\r\n\r\n  /**\r\n   * Sets the url of the item's image\r\n   */\r\n  setImage(image: string): void {\r\n    this.image = image;\r\n  }\r\n\r\n  /**\r\n   * Gets any additional data added to the item\r\n   */\r\n  getData(): any {\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Sets any additional data to the item\r\n   */\r\n  setData(data: any): void {\r\n    this.data = data;\r\n  }\r\n}\r\n",
    "import {Inject, Injectable} from '@angular/core';\r\nimport {CartItem} from '../classes/cart-item';\r\nimport {BrowserStorageCartService} from './browser-storage-cart.service';\r\nimport {BrowserStorageServiceConfiguration} from '../interfaces/browser-storage-service-configuration';\r\nimport {CART_ITEM_CLASS} from './item-class.token';\r\nimport {CART_SERVICE_CONFIGURATION} from './service-configuration.token';\r\n\r\n/**\r\n * An implementation of the cart service using sessionStorage to store items\r\n * @order 4\r\n */\r\n@Injectable()\r\nexport class SessionStorageCartService<T extends CartItem> extends BrowserStorageCartService<T> {\r\n  constructor(@Inject(CART_ITEM_CLASS) itemClass, @Inject(CART_SERVICE_CONFIGURATION) configuration: BrowserStorageServiceConfiguration) {\r\n    super(itemClass, configuration) /* istanbul ignore next */;\r\n    this.storage = window.sessionStorage;\r\n    this.restore();\r\n  }\r\n}\r\n",
    "import {Inject, Injectable} from '@angular/core';\r\nimport {CartItem} from '../classes/cart-item';\r\nimport {BrowserStorageCartService} from './browser-storage-cart.service';\r\nimport {BrowserStorageServiceConfiguration} from '../interfaces/browser-storage-service-configuration';\r\nimport {CART_ITEM_CLASS} from './item-class.token';\r\nimport {CART_SERVICE_CONFIGURATION} from './service-configuration.token';\r\n\r\n/**\r\n * An implementation of the cart service using localStorage to store items\r\n * @order 5\r\n */\r\n@Injectable()\r\nexport class LocalStorageCartService<T extends CartItem> extends BrowserStorageCartService<T> {\r\n  constructor(@Inject(CART_ITEM_CLASS) itemClass, @Inject(CART_SERVICE_CONFIGURATION) configuration: BrowserStorageServiceConfiguration) {\r\n    super(itemClass, configuration) /* istanbul ignore next */;\r\n    this.storage = window.localStorage;\r\n    this.restore();\r\n  }\r\n}\r\n",
    "import {Inject} from '@angular/core';\r\n\r\nimport {MemoryCartService} from './memory-cart.service';\r\nimport {CART_ITEM_CLASS} from './item-class.token';\r\nimport {CART_SERVICE_CONFIGURATION} from './service-configuration.token';\r\nimport {CartItem} from '../classes/cart-item';\r\nimport {BrowserStorageServiceConfiguration} from '../interfaces/browser-storage-service-configuration';\r\n\r\n/**\r\n * The base class for all CartService implementations that use the Storage interface of the Web Storage API like LocalStorage and\r\n * SessionStorage.\r\n * @service\r\n *\r\n * @order 3\r\n */\r\nexport abstract class BrowserStorageCartService<T extends CartItem> extends MemoryCartService<T> {\r\n  protected itemClass: any;\r\n  protected storage: Storage;\r\n  protected storageKey: string;\r\n  protected clearOnError: boolean;\r\n\r\n  constructor(\r\n    @Inject(CART_ITEM_CLASS) itemClass: CartItem,\r\n    @Inject(CART_SERVICE_CONFIGURATION) configuration: BrowserStorageServiceConfiguration\r\n  ) {\r\n    super() /* istanbul ignore next */;\r\n    this.storageKey = configuration && configuration.storageKey ? configuration.storageKey : 'NgShoppingCart';\r\n    this.clearOnError = configuration && configuration.clearOnError !== undefined ? configuration.clearOnError : true;\r\n    this.itemClass = itemClass;\r\n  }\r\n\r\n  private resetStorage(error: boolean | string | Error) {\r\n    if (this.clearOnError || !error) {\r\n      this.setTaxRate(0);\r\n      this.setShipping(0);\r\n      this.clear();\r\n      this.save();\r\n    } else {\r\n      if (typeof error === 'string') {\r\n        throw new Error(error);\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  protected save() {\r\n    this.storage.setItem(this.storageKey, JSON.stringify(this.toObject()));\r\n  }\r\n\r\n  protected restore() {\r\n    if (!this.storage.getItem(this.storageKey)) {\r\n      this.resetStorage(false);\r\n      return;\r\n    }\r\n    try {\r\n      const sc = JSON.parse(this.storage.getItem(this.storageKey));\r\n      if (!(sc.hasOwnProperty('items') && Array.isArray(sc.items) && sc.hasOwnProperty('taxRate') && sc.hasOwnProperty('shipping'))) {\r\n        this.resetStorage('The object found under the key ' + this.storageKey + ' is not a valid cart object');\r\n        return;\r\n      }\r\n      this._items = sc.items.map(i => {\r\n        if (this.itemClass.fromJSON) {\r\n          return this.itemClass.fromJSON(i);\r\n        }\r\n        return new this.itemClass(i);\r\n      });\r\n      this.setTaxRate(parseFloat(sc.taxRate));\r\n      this.setShipping(parseFloat(sc.shipping));\r\n    } catch (e) {\r\n      this.resetStorage(e);\r\n    }\r\n  }\r\n\r\n  addItem(item: T): void {\r\n    super.addItem(item);\r\n    this.save();\r\n  }\r\n\r\n  removeItem(id: any): void {\r\n    super.removeItem(id);\r\n    this.save();\r\n  }\r\n\r\n  clear(): void {\r\n    super.clear();\r\n    this.save();\r\n  }\r\n\r\n  setShipping(shipping: number): void {\r\n    super.setShipping(shipping);\r\n    this.save();\r\n  }\r\n\r\n  setTaxRate(tax: number): void {\r\n    super.setTaxRate(tax);\r\n    this.save();\r\n  }\r\n}\r\n",
    "import {CartService} from './cart.service';\r\nimport {CartItem} from '../classes/cart-item';\r\nimport {Injectable} from '@angular/core';\r\n\r\n/**\r\n * An implementation of the CartService using an in-memory array to store items\r\n * @order 2\r\n */\r\n@Injectable()\r\nexport class MemoryCartService<T extends CartItem> extends CartService<T> {\r\n  protected _items: T[] = [];\r\n  protected _taxRate = 0;\r\n  protected _shipping = 0;\r\n\r\n  protected _addItem(item: T): void {\r\n    const foundIdx = this._items.findIndex(i => i.getId() === item.getId());\r\n    if (foundIdx === -1) {\r\n      this._items.push(item);\r\n    } else {\r\n      this._items[foundIdx] = item;\r\n    }\r\n    this.onItemAdded.emit(item);\r\n    this.onItemsChanged.emit(this._items.length);\r\n    this.onChange.emit({change: 'items', value: this.getItems()});\r\n  }\r\n\r\n  protected _removeItem(id: any): void {\r\n    const idx = this._items.findIndex(i => i.getId() === id);\r\n    if (idx !== -1) {\r\n      const removed = this._items.splice(idx, 1);\r\n      this.onItemRemoved.emit(removed[0]);\r\n      this.onItemsChanged.emit(this._items.length);\r\n      this.onChange.emit({change: 'items', value: this.getItems()});\r\n    }\r\n  }\r\n\r\n  public getItem(id: any): T {\r\n    return this._items.find(i => i.getId() === id);\r\n  }\r\n\r\n  public getItems(): T[] {\r\n    return this._items.slice();\r\n  }\r\n\r\n  public itemCount(): number {\r\n    return this._items.length;\r\n  }\r\n\r\n  public entries(): number {\r\n    return this._items.reduce((curr, i) => (curr + i.getQuantity()), 0);\r\n  }\r\n\r\n  public addItem(item: T): void {\r\n    this._addItem(item);\r\n  }\r\n\r\n  public removeItem(id: any): void {\r\n    this._removeItem(id);\r\n  }\r\n\r\n  public cost(): number {\r\n    return this._items.reduce((curr, i) => (curr + i.getPrice() * i.getQuantity()), 0);\r\n  }\r\n\r\n  public clear() {\r\n    this._items = [];\r\n    this.onItemsChanged.emit(this._items.length);\r\n    this.onChange.emit({change: 'items', value: this.getItems()});\r\n  }\r\n\r\n  public getShipping(): number {\r\n    return this._shipping;\r\n  }\r\n\r\n  public setShipping(shipping: number): void {\r\n    this._shipping = shipping;\r\n    this.onShippingChange.emit(this._shipping);\r\n    this.onChange.emit({change: 'shipping', value: this._shipping});\r\n  }\r\n\r\n  public getTaxRate(): number {\r\n    return this._taxRate;\r\n  }\r\n\r\n  public setTaxRate(taxRate: number): void {\r\n    this._taxRate = taxRate;\r\n    this.onTaxChange.emit(this._taxRate);\r\n    this.onChange.emit({change: 'taxRate', value: this._taxRate});\r\n  }\r\n\r\n  public isEmpty(): boolean {\r\n    return this._items.length === 0;\r\n  }\r\n}\r\n",
    "import {InjectionToken} from '@angular/core';\r\n\r\n/**\r\n * An injection token to store the service type entered in the `forRoot` static function. Is used to prevent errors when compiling with AOT.\r\n * @ignore\r\n *\r\n * @note {info} You can safely ignore this token if you are using custom cart services.\r\n */\r\nexport const CART_SERVICE_TYPE = new InjectionToken<any>('CartServiceType');\r\n",
    "import { InjectionToken } from '@angular/core';\r\n\r\n/**\r\n * An injection token to resolve the configuration of the cart service\r\n */\r\nexport const CART_SERVICE_CONFIGURATION = new InjectionToken<any>('CartServiceConfiguration');\r\n",
    "import { InjectionToken } from '@angular/core';\r\nimport { CartItem } from '../classes/cart-item';\r\n\r\n/**\r\n * An injection token to resolve the class used to create CartItem instances\r\n */\r\nexport const CART_ITEM_CLASS = new InjectionToken<CartItem>('CartItemClass');\r\n",
    "import {\r\n  ComponentFactoryResolver, ComponentRef, Directive, Injector, Input, NgModuleFactory, NgModuleRef, OnChanges, OnDestroy, SimpleChanges,\r\n  Type, ViewContainerRef\r\n} from '@angular/core';\r\nimport {ShowcaseItem} from '../interfaces/showcase-item';\r\nimport {CartItem} from '../classes/cart-item';\r\n\r\n/**\r\n * A directive to create dynamic item components for the showcase component\r\n * @ignore\r\n */\r\n@Directive({\r\n  selector: '[cartShowcaseOutlet]',\r\n})\r\nexport class ShowcaseOutletDirective implements OnChanges, OnDestroy {\r\n  /**\r\n   * The component to render\r\n   */\r\n  @Input() cartShowcaseOutlet: Type<ShowcaseItem>;\r\n  /**\r\n   * The injector of the selected component\r\n   */\r\n  @Input() cartShowcaseOutletInjector: Injector;\r\n  /**\r\n   * The module factory of the selected component\r\n   */\r\n  @Input() cartShowcaseOutletNgModuleFactory: NgModuleFactory<any>;\r\n  /**\r\n   * The CartItem information to pass into the component\r\n   */\r\n  @Input() cartShowcaseOutletItem: CartItem;\r\n  /**\r\n   * The locale format received from the parent component\r\n   */\r\n  @Input() cartShowcaseOutletFormat: string;\r\n\r\n  private _componentRef: ComponentRef<any> | null = null;\r\n  private _moduleRef: NgModuleRef<any> | null = null;\r\n\r\n  constructor(public viewContainerRef: ViewContainerRef) {\r\n  }\r\n\r\n  private cleanModule() {\r\n    if (this._moduleRef) {\r\n      this._moduleRef.destroy();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const templateChange = Object.keys(changes).length !== 1 || !changes['cartShowcaseOutletFormat'];\r\n    if (templateChange) {\r\n      this.viewContainerRef.clear();\r\n      this._componentRef = null;\r\n\r\n      if (this.cartShowcaseOutlet) {\r\n        const elInjector = this.cartShowcaseOutletInjector || this.viewContainerRef.parentInjector;\r\n\r\n        if (changes['cartShowcaseOutletNgModuleFactory']) {\r\n          this.cleanModule();\r\n\r\n          if (this.cartShowcaseOutletNgModuleFactory) {\r\n            const parentModule = elInjector.get(NgModuleRef);\r\n            this._moduleRef = this.cartShowcaseOutletNgModuleFactory.create(parentModule.injector);\r\n          } else {\r\n            this._moduleRef = null;\r\n          }\r\n        }\r\n\r\n        const componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver :\r\n          elInjector.get(ComponentFactoryResolver);\r\n\r\n        const componentFactory =\r\n          componentFactoryResolver.resolveComponentFactory(this.cartShowcaseOutlet);\r\n\r\n        this._componentRef = this.viewContainerRef.createComponent(componentFactory, this.viewContainerRef.length, elInjector);\r\n        const instance = this._componentRef.instance;\r\n        instance.item = this.cartShowcaseOutletItem;\r\n        instance.format = this.cartShowcaseOutletFormat;\r\n      }\r\n    } else {\r\n      if (this._componentRef) {\r\n        this._componentRef.instance.format = this.cartShowcaseOutletFormat;\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.cleanModule();\r\n  }\r\n}\r\n",
    "import {Component, Injector, Input, NgModuleFactory, OnChanges, OnDestroy, OnInit, SimpleChanges, Type} from '@angular/core';\nimport {CartItem} from '../../classes/cart-item';\nimport {CartShowcaseItemComponent} from '../../components/cart-showcase-item/cart-showcase-item.component';\nimport {ShowcaseItem} from '../../interfaces/showcase-item';\nimport {CartService} from '../../services/cart.service';\n\n/**\n * Renders items arranged in columns using a dynamic component for the item. Useful for getting started with e-commerce applications.\n *\n * @order 4\n * @howToUse \"Using wider items\"\n * ```html\n * <cart-showcase [items]=\"items\" [aspectRatio]=\"'2:1'\">\n * </cart-showcase>\n * ```\n *\n * @howToUse \"Using four columns in all screen sizes bigger than 768px\"\n * ```html\n * <cart-showcase [items]=\"items\" [mCols]=\"4\" [lCols]=\"4\">\n * </cart-showcase>\n * ```\n *\n * @howToUse \"Using a different item component\"\n * ```html\n * <!-- my-component.html -->\n * <cart-showcase [items]=\"items\" [itemComponent]=\"itemComponent\">\n * </cart-showcase>\n * ```\n * ```typescript\n * // my-component.ts\n * export class MyComponent {\n *   itemComponent = MyCustomItemComponent;\n * }\n *\n * // my-custom-item-component.ts\n * @Component({\n *  selector: 'my-custom-item-component',\n *  template: '<div class=\"item-class\">{{item.getName()}}</div>'\n * })\n * export class MyCustomItemComponent implements ShowcaseItem  {\n *   item: CartItem;\n * }\n *\n * // app.module.ts\n * @NgModule({\n *   // .....\n *   entryComponents: [MyCustomItemComponent],\n * })\n * export class AppModule {\n * }\n * ```\n *\n * @note {warning} If you change the `[columns]` input you must also change the sass variable that controls the component grid and\n * vice-versa. A similar procedure is required to create aspect ratios with values greater than four eg: `'1:5'`. Check the styling guide\n * for more information.\n *\n * @note {danger} The aspect ratio is the width/height proportion of the items therefore a ratio of `'2:2'` is equivalent to `'1:1'`.\n * Redundant ratios like these are removed from the source so don't try to use them.\n *\n */\n@Component({\n  selector: 'cart-showcase',\n  template: `<div class=\"cart-showcase\">\n  <div class=\"sc-item-container\" *ngFor=\"let carItem of items\"\n       [ngClass]=\"[xsClass, sClass, mClass, lClass, xlClass, ratioClass]\">\n    <div class=\"sc-item-wrapper\">\n      <ng-container\n        *cartShowcaseOutlet=\"itemComponent;item:carItem;format:format;injector:injector;ngModuleFactory:moduleFactory\">\n      </ng-container>\n    </div>\n  </div>\n</div>\n`,\n})\nexport class CartShowcaseComponent implements OnChanges, OnInit, OnDestroy {\n  private _serviceSubscription: any;\n  format: string;\n  xsClass = 'sc-container-xs-12';\n  sClass = 'sc-container-s-6';\n  mClass = 'sc-container-m-4';\n  lClass = 'sc-container-l-4';\n  xlClass = 'sc-container-xl-3';\n  ratioClass = 'sc-ratio-1-1';\n  /**\n   * The number of columns to display when the screen size matches phone devices.\n   */\n  @Input() xsCols = 1;\n  /**\n   * The number of columns to display when the screen matches tablet devices.\n   */\n  @Input() sCols = 2;\n  /**\n   * The number of columns to display when the screen matches desktop devices.\n   */\n  @Input() mCols = 3;\n  /**\n   * The number of columns to display when the screen matches large desktop devices.\n   */\n  @Input() lCols = 3;\n  /**\n   * The number of columns to display when the screen matches extra large desktop devices.\n   */\n  @Input() xlCols = 4;\n  /**\n   * The number of columns in the grid.\n   * Only update this value if you changed the columns sass variable in the library styles following the Styling guide.\n   */\n  @Input() columns = 12;\n  /**\n   * An array of items to display\n   */\n  @Input() items: CartItem[];\n  /**\n   * The component to render for each item. This type means any component that implements the interface `ShowcaseItem`.\n   */\n  @Input() itemComponent: Type<ShowcaseItem> = CartShowcaseItemComponent;\n  /**\n   * Optional injector for the dynamic item components. Used when you want to replace the default inherited injector for the component.\n   */\n  @Input() injector: Injector;\n  /**\n   * Optional module factory for the dynamic components. You usually get one when you manually compile modules.\n   */\n  @Input() moduleFactory: NgModuleFactory<any>;\n  /**\n   * The aspect ratio of the container of the items. A value of `1:1` means square items, `2:1` means two times wider, `1:2` two times\n   * taller and so on.\n   */\n  @Input() aspectRatio = '1:1';\n  /**\n   * Changes currency display format for the component. Overrides the value set from the service using `setLocaleFormat`.\n   */\n  @Input() localeFormat: string;\n\n  private getColumnSize(value) {\n    return Math.floor(this.columns / value);\n  }\n\n  constructor(private cartService: CartService<any>) {\n\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const columnProps = ['xsCols', 'sCols', 'mCols', 'lCols', 'xlCols'];\n    const classPrefix = ['xs', 's', 'm', 'l', 'xl'];\n    for (let i = 0; i < columnProps.length; i++) {\n      const prop = columnProps[i];\n      const colChanges = changes[prop];\n      if (changes['columns'] || colChanges) {\n        const prefix = classPrefix[i];\n        const size = this.getColumnSize(this[prop]);\n        this[`${prefix}Class`] = `sc-container-${prefix}-${size}`;\n      }\n    }\n    if (changes['aspectRatio']) {\n      const newRatio = changes['aspectRatio'].currentValue;\n      const values = newRatio.split(':');\n      if (values.length === 2) {\n        this.ratioClass = `sc-ratio-${values[0]}-${values[1]}`;\n      }\n    }\n    if (changes['localeFormat']) {\n      this.format = this.localeFormat || <string>this.cartService.getLocaleFormat();\n    }\n  }\n\n  ngOnInit(): void {\n    this.format = this.localeFormat || <string>this.cartService.getLocaleFormat();\n    this._serviceSubscription = this.cartService.onChange.subscribe((evt) => {\n      if (evt.change === 'format' && !this.localeFormat) {\n        this.format = <string>this.cartService.getLocaleFormat();\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this._serviceSubscription.unsubscribe();\n  }\n}\n",
    "import {Component} from '@angular/core';\nimport {ShowcaseItem} from '../../interfaces/showcase-item';\nimport {CartItem} from '../../classes/cart-item';\n\n/**\n * The default implementation of a showcase item.\n *\n * @note {info} This component is only intended to be used as a template for you to create your own components either by pure css\n * customization or by providing an actually working sample to serve as a guide for more complex cases.\n *\n * @order 5\n */\n@Component({\n  selector: 'cart-showcase-item',\n  template: `<div class=\"showcase-item default-sc-item\" [ngStyle]=\"{'background-image': 'url(' + item.getImage() + ')'}\">\n  <div class=\"default-sc-description\">\n    <div class=\"default-sc-name\">\n      {{item.getName()}}\n    </div>\n    <div class=\"default-sc-price\">\n      {{item.getPrice() | cartCurrency:format}}\n    </div>\n  </div>\n</div>\n`,\n})\nexport class CartShowcaseItemComponent implements ShowcaseItem {\n  /**\n   * Inherited from the interface `ShowcaseItem`\n   */\n  item: CartItem;\n  /**\n   * Inherited from the interface `ShowcaseItem`\n   */\n  format: string;\n}\n",
    "import {Component, OnInit, OnDestroy, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {CartItem} from '../../classes/cart-item';\nimport {CartService} from '../../services/cart.service';\nimport {CartViewDisplay} from '../../types';\nimport {LocaleFormat} from '../../interfaces/locale-format';\nimport {parseLocaleFormat} from '../../locales';\n\n/**\n * Renders a view of the cart.\n *\n * @order 2\n * @howToUse \"Using responsive layout\"\n * ```html\n * <cart-view [display]=\"'responsive'\">\n * </cart-view>\n * ```\n *\n * @howToUse \"No images and using scrollbars on small screens\"\n * ```html\n * <cart-view [images]=\"false\" [display]=\"'responsive-table'\">\n * </cart-view>\n * ```\n *\n * @howToUse \"Using different text for headers\"\n * ```html\n * <cart-view [emptyText]=\"headers.empty\" [nameHeaderText]=\"headers.name\" [quantityHeaderText]=\"headers.quantity\"\n *  [priceHeaderText]=\"headers.quantity\" [totalHeaderText]=\"headers.total\" [taxFooterText]=\"footers.tax\"\n *  [shippingFooterText]=\"footers.shipping\" [totalFooterText]=\"footers.total\"\n * >\n * </cart-view>\n * ```\n * ```typescript\n * export class MyComponent {\n *   headers = {\n *     empty: 'No items. Add some to the cart',\n *     name: 'Description',\n *     quantity: 'Amount',\n *     price: 'Cost',\n *     total: 'Total x item',\n *   }\n *   footers = {\n *     tax: 'Tax rate',\n *     shipping: 'Shipping cost',\n *     total: 'Total cost'\n *   }\n * }\n * ```\n *\n * @howToUse \"Change the default empty cart content\"\n * ```html\n * <cart-view [customEmptyContent]=\"true\">\n *   <div class=\"my-empty-cart-view\">\n *       <span style=\"font-size: 36px;\" class=\"glyphicon glyphicon-shopping-cart\" aria-hidden=\"true\"></span>\n *       Your cart is empty\n *   </div>\n * </cart-view>\n * ```\n */\n@Component({\n  selector: 'cart-view',\n  template: `<ng-container *ngIf=\"empty\">\r\n  <div *ngIf=\"!customEmptyContent\" class=\"cart-view-empty\">\r\n    {{emptyText}}\r\n  </div>\r\n  <ng-content *ngIf=\"customEmptyContent\"></ng-content>\r\n</ng-container>\r\n<ng-container *ngIf=\"!empty\">\r\n  <ng-container *ngIf=\"display !== 'table'\">\r\n    <div *ngIf=\"!empty\" class=\"cart-view\" [ngClass]=\"display + '-display'\">\r\n      <div class=\"cart-list-view\" [ngClass]=\"{'no-images': !images}\">\r\n        <div class=\"cart-list-header\">\r\n          <div class=\"cart-list-header-value cart-list-image-header\">\r\n          </div>\r\n          <div class=\"cart-list-header-value cart-list-name-header\">\r\n            {{nameHeaderText}}\r\n          </div>\r\n          <div class=\"cart-list-header-value cart-list-quantity-header\">\r\n            {{quantityHeaderText}}\r\n          </div>\r\n          <div class=\"cart-list-header-value cart-list-price-header\">\r\n            {{priceHeaderText}}\r\n          </div>\r\n          <div class=\"cart-list-header-value cart-list-total-header\">\r\n            {{totalHeaderText}}\r\n          </div>\r\n        </div>\r\n        <div *ngFor=\"let cartItem of items\" class=\"cart-list-item\">\r\n          <div class=\"cart-list-value cart-list-image-value\"\r\n               [ngStyle]=\"{'background-image': 'url(' + cartItem.getImage() + ')'}\">\r\n          </div>\r\n          <div class=\"cart-list-value cart-list-name-value\">\r\n            {{cartItem.getName()}}\r\n          </div>\r\n          <div class=\"cart-list-value cart-list-quantity-value\">\r\n            <button type=\"button\" class=\"cart-increase-button\" (click)=\"increase(cartItem)\">\r\n              +\r\n            </button>\r\n            <span class=\"cart-list-quantity-content\">{{cartItem.getQuantity()}}</span>\r\n            <button type=\"button\" class=\"cart-decrease-button\" (click)=\"decrease(cartItem)\">\r\n              -\r\n            </button>\r\n          </div>\r\n          <div class=\"cart-list-value cart-list-price-value\">\r\n            {{cartItem.getPrice() | currency:format.currencyCode:format.display:format.digitsInfo:format.locale}}\r\n          </div>\r\n          <div class=\"cart-list-value cart-list-total-value\">\r\n            {{cartItem.total() | currency:format.currencyCode:format.display:format.digitsInfo:format.locale}}\r\n          </div>\r\n        </div>\r\n        <div class=\"cart-list-footer\">\r\n          <div class=\"cart-list-summary\">\r\n            <div class=\"cart-empty-summary\" *ngIf=\"images\"></div>\r\n            <div class=\"cart-empty-summary\"></div>\r\n            <div class=\"cart-empty-summary\"></div>\r\n            <div class=\"cart-empty-summary\"></div>\r\n            <div class=\"cart-tax-summary\">\r\n              {{taxFooterText}}: ({{taxRate | percent:format.digitsInfo:format.locale}})\r\n              {{tax | currency:format.currencyCode:format.display:format.digitsInfo:format.locale}}\r\n            </div>\r\n          </div>\r\n          <div class=\"cart-list-summary\">\r\n            <div class=\"cart-empty-summary\" *ngIf=\"images\"></div>\r\n            <div class=\"cart-empty-summary\"></div>\r\n            <div class=\"cart-empty-summary\"></div>\r\n            <div class=\"cart-empty-summary\"></div>\r\n            <div class=\"cart-shipping-summary\">\r\n              {{shippingFooterText}}:\r\n              {{shipping | currency:format.currencyCode:format.display:format.digitsInfo:format.locale}}\r\n            </div>\r\n          </div>\r\n          <div class=\"cart-list-summary\">\r\n            <div class=\"cart-empty-summary\" *ngIf=\"images\"></div>\r\n            <div class=\"cart-empty-summary\"></div>\r\n            <div class=\"cart-empty-summary\"></div>\r\n            <div class=\"cart-empty-summary\"></div>\r\n            <div class=\"cart-total-summary\">\r\n              {{totalFooterText}}:\r\n              {{cost | currency:format.currencyCode:format.display:format.digitsInfo:format.locale}}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"display === 'table'\">\r\n    <table class=\"cart-view table-display\">\r\n      <thead class=\"cart-list-header\">\r\n      <tr>\r\n        <th class=\"cart-list-header-value cart-list-image-header\" *ngIf=\"images\"></th>\r\n        <th class=\"cart-list-header-value cart-list-name-header\">{{nameHeaderText}}</th>\r\n        <th class=\"cart-list-header-value cart-list-quantity-header\">{{quantityHeaderText}}</th>\r\n        <th class=\"cart-list-header-value cart-list-price-header\">{{priceHeaderText}}</th>\r\n        <th class=\"cart-list-header-value cart-list-total-header\">{{totalHeaderText}}</th>\r\n      </tr>\r\n      </thead>\r\n      <tbody>\r\n      <tr *ngFor=\"let cartItem of items\">\r\n        <td class=\"cart-list-value cart-list-image-value\" *ngIf=\"images\"\r\n            [ngStyle]=\"{'background-image': 'url(' + cartItem.getImage() + ')'}\">\r\n        </td>\r\n        <td class=\"cart-list-value cart-list-name-value\">{{cartItem.getName()}}</td>\r\n        <td class=\"cart-list-value cart-list-quantity-value\">\r\n          <button type=\"button\" class=\"cart-increase-button\" (click)=\"increase(cartItem)\">\r\n            +\r\n          </button>\r\n          <span class=\"cart-list-quantity-content\">{{cartItem.getQuantity()}}</span>\r\n          <button type=\"button\" class=\"cart-decrease-button\" (click)=\"decrease(cartItem)\">\r\n            -\r\n          </button>\r\n        </td>\r\n        <td class=\"cart-list-value cart-list-price-value\">\r\n          {{cartItem.getPrice() | currency:format.currencyCode:format.display:format.digitsInfo:format.locale}}\r\n        </td>\r\n        <td class=\"cart-list-value cart-list-total-value\">\r\n          {{cartItem.total() | currency:format.currencyCode:format.display:format.digitsInfo:format.locale}}\r\n        </td>\r\n      </tr>\r\n      </tbody>\r\n      <tfoot class=\"cart-list-footer\">\r\n      <tr class=\"cart-list-summary\">\r\n        <td [attr.colspan]=\"images ? 4 : 3\" class=\"cart-empty-summary\"></td>\r\n        <td class=\"cart-tax-summary\">\r\n          {{taxFooterText}}: ({{taxRate | percent:format.digitsInfo:format.locale}})\r\n          {{tax | currency:format.currencyCode:format.display:format.digitsInfo:format.locale}}\r\n        </td>\r\n      </tr>\r\n      <tr class=\"cart-list-summary\">\r\n        <td [attr.colspan]=\"images ? 4 : 3\" class=\"cart-empty-summary\"></td>\r\n        <td class=\"cart-shipping-summary\">\r\n          {{shippingFooterText}}:\r\n          {{shipping | currency:format.currencyCode:format.display:format.digitsInfo:format.locale}}\r\n        </td>\r\n      </tr>\r\n      <tr class=\"cart-list-summary\">\r\n        <td [attr.colspan]=\"images ? 4 : 3\" class=\"cart-empty-summary\"></td>\r\n        <td class=\"cart-total-summary\">\r\n          {{totalFooterText}}:\r\n          {{cost | currency:format.currencyCode:format.display:format.digitsInfo:format.locale}}\r\n        </td>\r\n      </tr>\r\n      </tfoot>\r\n    </table>\r\n  </ng-container>\r\n</ng-container>\r\n\r\n`,\n})\nexport class CartViewComponent implements OnInit, OnChanges, OnDestroy {\n  private _serviceSubscription: any;\n  /**\n   * Changes the appearance how the cart view displays in different screen sizes\n   */\n  @Input() display: CartViewDisplay = 'responsive-table';\n  /**\n   * Whether to include images in the cart or not.\n   */\n  @Input() images = true;\n  /**\n   * The text to show when the cart has no items in it.\n   */\n  @Input() emptyText = 'Your cart is empty';\n  /**\n   * When set to `true` and the cart is empty displays the projected content of the component as the empty content.\n   */\n  @Input() customEmptyContent = false;\n  /**\n   * The text to display in the header of the name column.\n   */\n  @Input() nameHeaderText = 'Name';\n  /**\n   * The text to display in the header of the quantity column.\n   */\n  @Input() quantityHeaderText = 'Quantity';\n  /**\n   * The text to display in the header of the price column.\n   */\n  @Input() priceHeaderText = 'Price';\n  /**\n   * The text to display in the header of the total per item column.\n   */\n  @Input() totalHeaderText = 'Total';\n  /**\n   * The text to display in the tax section of the footer.\n   */\n  @Input() taxFooterText = 'Tax';\n  /**\n   * The text to display in the shipping section of the footer.\n   */\n  @Input() shippingFooterText = 'Shipping';\n  /**\n   * The text to display in the total section of the footer.\n   */\n  @Input() totalFooterText = 'Total';\n  /**\n   * Changes currency display format for the component. Overrides the value set from the service using `setCurrencyFormat`.\n   */\n  @Input() localeFormat: string;\n  format: LocaleFormat;\n  empty = true;\n  items: CartItem[];\n  taxRate = 0;\n  tax = 0;\n  shipping = 0;\n  cost = 0;\n\n  constructor(private cartService: CartService<any>) {\n\n  }\n\n  update() {\n    this.empty = this.cartService.isEmpty();\n    this.items = this.cartService.getItems();\n    this.taxRate = this.cartService.getTaxRate() / 100;\n    this.tax = this.cartService.getTax();\n    this.shipping = this.cartService.getShipping();\n    this.cost = this.cartService.totalCost();\n    if (!this.localeFormat) {\n      this.format = <LocaleFormat>this.cartService.getLocaleFormat(true);\n    }\n  }\n\n  increase(item: CartItem) {\n    item.setQuantity(item.getQuantity() + 1);\n    this.cartService.addItem(item);\n  }\n\n  decrease(item: CartItem) {\n    if (item.getQuantity() > 1) {\n      item.setQuantity(item.getQuantity() - 1);\n      this.cartService.addItem(item);\n    } else {\n      this.cartService.removeItem(item.getId());\n    }\n  }\n\n  ngOnInit(): void {\n    this.update();\n    this._serviceSubscription = this.cartService.onChange.subscribe(() => {\n      this.update();\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['localeFormat']) {\n      this.format = this.localeFormat ?\n        parseLocaleFormat(this.localeFormat) :\n        <LocaleFormat>this.cartService.getLocaleFormat(true);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._serviceSubscription.unsubscribe();\n  }\n}\n",
    "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { DropdownValue } from '../../interfaces/dropdown-value';\nimport { AddToCartType } from '../../types';\n\n/**\n * An editor to change the quantity of an item to add to the cart.\n * @ignore\n */\n@Component({\n  selector: 'add-to-cart-editor', // tslint:disable-line component-selector\n  template: `<ng-container *ngIf=\"type === 'dropdown'\">\n  <select class=\"add-to-cart-input\" #selectAmount (change)=\"changeValue(selectAmount.value)\">\n    <option [selected]=\"item.value === value\" *ngFor=\"let item of dropdown\" [value]=\"item.value\">{{item.label}}</option>\n  </select>\n</ng-container>\n<ng-container *ngIf=\"type === 'number' || type === 'text'\">\n  <input class=\"add-to-cart-input\" #inputAmount [type]=\"type\" (change)=\"changeValue(inputAmount.value)\" [value]=\"value\">\n</ng-container>\n\n`,\n})\nexport class AddToCartEditorComponent {\n  /**\n   * The type of editor to display.\n   */\n  @Input() type: AddToCartType = 'text';\n  /**\n   * A list of values to display in the dropdown editor.\n   */\n  @Input() dropdown: DropdownValue[];\n  /**\n   * The value to display in the editor\n   */\n  @Input() value = 1;\n  /**\n   * Emits a the value of the editor when the user changes it\n   */\n  @Output() valueChange = new EventEmitter<number>();\n\n  changeValue(value: any) {\n    const val = parseFloat(value);\n    this.valueChange.emit(Number.isNaN(val) ? 1 : val);\n  }\n}\n",
    "import {Component, OnInit, OnDestroy, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {CartService} from '../../services/cart.service';\nimport {LocaleFormat} from '../../interfaces/locale-format';\nimport {parseLocaleFormat} from '../../locales';\n\n/**\n * Renders a summary of the contents of the cart.\n *\n * @order 3\n * @howToUse \"With a different icon\"\n * ```html\n * <cart-summary [icon]=\"'http://myapi/assets/icon.svg'\"></cart-summary>\n * ```\n *\n * @howToUse \"Display different words when the cart changes\"\n * ```html\n * <cart-summary [noItemsText]=\"'Zero items'\" [oneItemText]=\"'Single item'\" [manyItemsText]=\"'Exactly # items'\"></cart-summary>\n * ```\n *\n * @howToUse \"Using always a number to display item count\"\n * ```html\n * <cart-summary [noItemsText]=\"'# items'\" [oneItemText]=\"'# items'\" [manyItemsText]=\"'# items'\"></cart-summary>\n * ```\n *\n * @note {info} Inputs that allows you to customize text also accept the special character `#` to use numbers instead of words to\n * specify quantity, for example `'# bla'` will update to `'0 bla'` or `'1 bla'` when the number of items in the cart change.\n */\n@Component({\n  selector: 'cart-summary',\n  template: `<div class=\"cart-summary\">\n  <div class=\"cart-summary-icon\">\n    <svg *ngIf=\"!icon\" version=\"1.1\" class=\"summary-icon\" xmlns=\"http://www.w3.org/2000/svg\"\n         xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 32 32\">\n      <path stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" fill=\"none\" stroke-linejoin=\"round\"\n            d=\"M2,4 L6,4 L10,20 L21,20 L25,10 L8,10 M13,10 L13,20 M18,20 L18,10 M10,15 L23,15\"/>\n      <circle fill=\"currentColor\" cx=\"11\" cy=\"24\" r=\"2\"/>\n      <circle fill=\"currentColor\" cx=\"21\" cy=\"24\" r=\"2\"/>\n    </svg>\n    <img *ngIf=\"icon\" [src]=\"icon\" class=\"summary-icon\" alt=\"cart-summary-icon\">\n  </div>\n  <div class=\"cart-summary-contents\">\n    <div class=\"cart-summary-items\">\n      {{itemsText}}\n    </div>\n    <div class=\"cart-summary-cost\">\n      {{totalCost | currency:format.currencyCode:format.display:format.digitsInfo:format.locale}}\n    </div>\n  </div>\n</div>\n`,\n})\nexport class CartSummaryComponent implements OnInit, OnChanges, OnDestroy {\n  private _serviceSubscription: any;\n  /**\n   * The url of an icon to show on the summary. Use this to replace the default icon which is an svg with the image of a shopping cart.\n   *\n   * To use the default icon when you are using the `[icon]` input just set it to a falsy value, eg: `null`, `undefined`, `''`, etc.\n   */\n  @Input() icon: string;\n  /**\n   * The text to display when there are no items in the cart.\n   */\n  @Input() noItemsText = 'No items';\n  /**\n   * The text to display when there is only one item in the cart.\n   */\n  @Input() oneItemText = 'One item';\n  /**\n   * The text to display when there are several items in the cart.\n   */\n  @Input() manyItemsText = '# items';\n  /**\n   * Changes currency display format for the component. Overrides the value set from the service using `setCurrencyFormat`.\n   */\n  @Input() localeFormat: string;\n  itemsText;\n  totalItems = 0;\n  totalCost = 0;\n  format: LocaleFormat;\n\n  constructor(private cartService: CartService<any>) {\n\n  }\n\n  private updateItemsText() {\n    let text = this.noItemsText;\n    if (this.totalItems > 0) {\n      text = this.totalItems === 1 ? this.oneItemText : this.manyItemsText;\n    }\n    this.itemsText = text.replace('#', this.totalItems.toString());\n  }\n\n  private updateComponent() {\n    this.totalItems = this.cartService.itemCount();\n    this.totalCost = !this.cartService.isEmpty() ? this.cartService.totalCost() : 0;\n    if (!this.localeFormat) {\n      this.format = <LocaleFormat>this.cartService.getLocaleFormat(true);\n    }\n    this.updateItemsText();\n  }\n\n  ngOnInit(): void {\n    this.updateComponent();\n    this._serviceSubscription = this.cartService.onChange.subscribe(() => {\n      this.updateComponent();\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['localeFormat']) {\n      this.format = this.localeFormat ?\n        parseLocaleFormat(this.localeFormat) :\n        <LocaleFormat>this.cartService.getLocaleFormat(true);\n    }\n    if (changes['noItemsText'] || changes['oneItemText'] || changes['manyItemsText']) {\n      this.updateItemsText();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._serviceSubscription.unsubscribe();\n  }\n}\n",
    "import {Component, EventEmitter, Inject, Input, LOCALE_ID, OnChanges, OnDestroy, OnInit, Output, SimpleChanges} from '@angular/core';\nimport {CurrencyPipe, getLocaleCurrencyName} from '@angular/common';\nimport {HttpClient, HttpParams, HttpRequest} from '@angular/common/http';\n\nimport {CheckoutSettings, CheckoutType} from '../../types';\nimport {CartService} from '../../services/cart.service';\nimport {CheckoutPaypalSettings} from '../../interfaces/checkout-paypal-settings';\nimport {CheckoutHttpSettings} from '../../interfaces/checkout-http-settings';\nimport {LocaleFormat} from '../../interfaces/locale-format';\nimport {parseLocaleFormat} from '../../locales';\n\n/**\n * Renders a button to initiate checkout of the cart.\n *\n * @order 6\n * @howToUse \"With a custom button or projected content\"\n * ```html\n * <cart-checkout [custom]=\"true\">\n *    <button type=\"button\" class=\"my-custom-class\">Do checkout</button>\n * </cart-checkout>\n * ```\n *\n * @howToUse \"With different text and classes\"\n * ```html\n * <cart-checkout [buttonText]=\"'Add item'\" [buttonClass]=\"'my-custom-class'\">\n * </cart-checkout>\n * ```\n *\n * @howToUse \"Using http in a protected endpoint\"\n * ```html\n * <cart-checkout [service]=\"'http'\" settings=\"settings\">\n * </cart-checkout>\n * ```\n * ```typescript\n * export class MyComponent {\n *   settings: CheckoutHttpSettings = {\n *     method: 'POST',\n *     url: 'http://myapi.com/',\n *     options: { headers: { Authorization: 'Bearer my-auth-token' } }\n *   };\n * }\n * ```\n *\n * @howToUse \"Using the PayPal service\"\n * ```html\n * <cart-checkout [service]=\"'paypal'\" settings=\"settings\">\n * </cart-checkout>\n * ```\n * ```typescript\n * export class MyComponent {\n *  settings: CheckoutPaypalSettings = {\n *    business: 'myaccount@paypal.com',\n *    itemName: 'myMarketplaceAppCart',\n *    itemNumber: '1234',\n *    serviceName: 'MyBusiness',\n *    country: 'US'\n *  };\n * }\n * ```\n *\n * @note {warning} This component captures clicks events bubbling from its projected content. Make sure the event keeps bubbling only when\n * you want the checkout operation to start.\n *\n * @note {warning} When the `[service]` is set to `paypal` an actual PayPal button is rendered. None of the inputs `custom`, `buttonText`\n * or `buttonClass` have any effect.\n */\n@Component({\n  selector: 'cart-checkout',\n  template: `<ng-container *ngIf=\"service === 'log' || service === 'http'\">\n  <button [ngClass]=\"buttonClass\" [disabled]=\"empty\" *ngIf=\"!custom\" (click)=\"doCheckout()\">\n    {{buttonText}}\n  </button>\n  <span (click)=\"doCheckout()\" *ngIf=\"custom\">\n    <ng-content>\n    </ng-content>\n  </span>\n</ng-container>\n<ng-container *ngIf=\"service === 'paypal'\">\n  <form action=\"https://www.paypal.com/cgi-bin/webscr\" method=\"post\" target=\"_top\">\n    <input type=\"hidden\" name=\"cmd\" value=\"_xclick\"/>\n    <input type=\"hidden\" name=\"business\" value=\"{{paypalSettings.business}}\"/>\n    <input type=\"hidden\" name=\"lc\" value=\"{{paypalLocale}}\"/>\n    <input type=\"hidden\" name=\"item_name\" value=\"{{paypalSettings.itemName}}\" *ngIf=\"paypalSettings.itemName\"/>\n    <input type=\"hidden\" name=\"item_number\" value=\"{{paypalSettings.itemNumber}}\" *ngIf=\"paypalSettings.itemNumber\"/>\n    <input type=\"hidden\" name=\"amount\" value=\"{{cost}}\"/>\n    <input type=\"hidden\" name=\"currency_code\" value=\"{{currency}}\"/>\n    <input type=\"hidden\" name=\"tax_rate\" value=\"{{taxRate}}\"/>\n    <input type=\"hidden\" name=\"shipping\" value=\"{{shipping}}\"/>\n    <input type=\"hidden\" name=\"bn\" value=\"{{paypalSettings.serviceName + '_BuyNow_WPS_' + paypalSettings.country}}\"\n           *ngIf=\"paypalSettings.serviceName && paypalSettings.country\"/>\n    <input type=\"image\" src=\"https://www.paypalobjects.com/en_US/i/btn/btn_buynowCC_LG.gif\" border=\"0\" name=\"submit\"\n           alt=\"PayPal - The safer, easier way to pay online!\"/>\n    <img alt=\"\" border=\"0\" src=\"https://www.paypalobjects.com/en_US/i/scr/pixel.gif\" width=\"1\" height=\"1\"/>\n  </form>\n</ng-container>\n`,\n})\nexport class CartCheckoutComponent implements OnChanges, OnInit, OnDestroy {\n  private _serviceSubscription: any;\n  private getLocaleCurrencyName: any;\n  empty = true;\n  cost = 0;\n  taxRate = 0;\n  shipping = 0;\n  httpSettings: CheckoutHttpSettings;\n  paypalSettings: CheckoutPaypalSettings;\n  format: LocaleFormat;\n  currency = 'USD';\n  paypalLocale = 'en';\n  /**\n   * If `false` displays a default button provided by the component. When set to `true` projects the contents of the component.\n   */\n  @Input() custom = false;\n  /**\n   * Changes the default text of the component's button.\n   */\n  @Input() buttonText = 'Checkout';\n  /**\n   * Changes the default text of the component's button.\n   */\n  @Input() buttonClass = 'cart-checkout-button';\n  /**\n   * Sets the type of service to be used when initiating the checkout.\n   */\n  @Input() service: CheckoutType = 'log';\n  /**\n   * Depending on the type of the service you might need to add some configuration to it. This input allows you to change that\n   * configuration.\n   */\n  @Input() settings: CheckoutSettings = null;\n  /**\n   * Changes currency display format for the component. Overrides the value set from the service using `setCurrencyFormat`.\n   */\n  @Input() localeFormat: string;\n  /**\n   * Emits the result of the checkout operation. If the service is set to `'log'` it emits the entire cart object including tax rates and\n   * shipping info. If is set to `'http'` it emits an `HttpResponse` object with body, headers, etc as it was received by the remote server.\n   *\n   * > When `[service]` is set to `'paypal'` this event is never emitted.\n   */\n  @Output() checkout = new EventEmitter<any>();\n  /**\n   * When the `[service]` is set to `'http'` and the checkout operation fails the thrown error can be captured using this output.\n   *\n   * The emitted value is the complete `HttpErrorResponse` object returned by `HttpClient` so you can inspect other properties like status\n   * codes, headers, messages, etc.\n   */\n  @Output() error = new EventEmitter<any>();\n\n  constructor(private cartService: CartService<any>, private httpClient: HttpClient, @Inject(LOCALE_ID) private locale: string) {\n    this.getLocaleCurrencyName = getLocaleCurrencyName;\n  }\n\n  ngOnInit(): void {\n    this.updateCart(true);\n    this._serviceSubscription = this.cartService\n      .onChange\n      .subscribe((evt) => this.updateCart(evt.change === 'format'));\n  }\n\n  private updateCart(formatChange) {\n    this.empty = this.cartService.isEmpty();\n    this.cost = this.cartService.cost();\n    this.taxRate = this.cartService.getTaxRate();\n    this.shipping = this.cartService.getShipping();\n    if (formatChange) {\n      this.updateLocale();\n    }\n  }\n\n  private updateLocale() {\n    this.format = this.localeFormat ?\n      parseLocaleFormat(this.localeFormat) :\n      <LocaleFormat>this.cartService.getLocaleFormat(true);\n    const loc = this.format.locale || this.locale;\n    this.paypalLocale = loc.substring(0, 2);\n    this.currency = this.format.currencyCode || this.getCurrency(loc);\n  }\n\n  private getCurrency(locale) {\n    const currencyCode = this.getLocaleCurrencyName(locale);\n    if (!currencyCode) {\n      return 'USD';\n    }\n    if (currencyCode.length === 3) {\n      return currencyCode;\n    }\n    // Angular < 6 return \"US Dollar\" instead of \"USD\" so we have to hack the code using the currency pipe\n    // You will also get USD on locales where you should get EUR so for those versions currencyCode must be used\n    const fmt = new CurrencyPipe(locale);\n    const val = fmt.transform(0, undefined, 'code', '1.0-0', locale);\n    const pre = val.startsWith('0');\n    return val.substr(pre ? -3 : 0, 3);\n  }\n\n  doCheckout() {\n    let cart: any = this.cartService.toObject();\n    switch (this.service) {\n      case 'log':\n        console.log(cart);\n        this.checkout.emit(cart);\n        break;\n      case 'http':\n        if (!this.settings) {\n          throw new Error('Missing settings configuration');\n        }\n        const verbs = ['POST', 'PUT', 'PATCH'];\n        const {url, method = 'POST', options, body} = this.httpSettings;\n        const methodUpper = method.toUpperCase();\n        if (verbs.indexOf(methodUpper) === -1) {\n          throw new Error(`Invalid http verb found in method setting. Expected one of ${verbs.join(' ')} and got ${method}`);\n        }\n        if (body) {\n          cart = typeof body === 'function' ? body(cart) : Object.assign({}, cart, body);\n        }\n        if (options && options.headers && options.headers.has('Content-Type')) {\n          const contentType = options.headers.get('Content-Type');\n          if (contentType.startsWith('application/x-www-form-urlencoded')) {\n            cart = new HttpParams({fromObject: cart});\n          }\n        }\n        this.httpClient\n          .request(new HttpRequest(methodUpper, url, cart, options))\n          .toPromise()\n          .then(response => {\n            this.checkout.emit(response);\n          })\n          .catch(err => {\n            this.error.emit(err);\n          });\n        break;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['settings'] && changes['settings'].currentValue) {\n      const hasOwn = Object.prototype.hasOwnProperty;\n      const value = changes['settings'].currentValue;\n      if (hasOwn.call(value, 'business')) {\n        this.paypalSettings = changes['settings'].currentValue;\n      }\n      if (hasOwn.call(value, 'url')) {\n        this.httpSettings = changes['settings'].currentValue;\n      }\n    }\n    if (changes['localeFormat']) {\n      this.updateLocale();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._serviceSubscription.unsubscribe();\n  }\n}\n",
    "import {Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges} from '@angular/core';\nimport {DropdownValue} from '../../interfaces/dropdown-value';\nimport {AddToCartPosition, AddToCartType} from '../../types';\nimport {CartService} from '../../services/cart.service';\nimport {CartItem} from '../../classes/cart-item';\n\n/**\n * A component to add items to the cart by pressing a button. Has different built-in editors to select quantity.\n *\n * @order 1\n * @howToUse \"With a custom button or projected content\"\n * ```html\n * <add-to-cart [item]=\"item\" [custom]=\"true\">\n *    <button type=\"button\" class=\"my-custom-class\">Add item</button>\n * </add-to-cart>\n * ```\n *\n * @howToUse \"With different text and classes\"\n * ```html\n * <add-to-cart [item]=\"item\" [buttonText]=\"'Add item'\" [buttonClass]=\"'my-custom-class'\">\n * </add-to-cart>\n * ```\n *\n * @howToUse \"With a html number input positioned on top\"\n * ```html\n * <add-to-cart [item]=\"item\" [type]=\"'number'\" [position]=\"'top'\">\n * </add-to-cart>\n * ```\n *\n * @howToUse \"With a select for selecting quantity\"\n * ```html\n * <add-to-cart [item]=\"item\" [type]=\"'dropdown'\" [dropdown]=\"[{ label: 'One item', value: 1 }, { label: 'Two items', value: 2 }]\">\n * </add-to-cart>\n * ```\n *\n * @howToUse \"With the default button and different quantity\"\n * ```html\n * <add-to-cart [item]=\"item\" [quantity]=\"5\">\n * </add-to-cart>\n * ```\n *\n * @note {warning} This component captures click events that bubble from its projected content if you are using `[custom]=true` therefore if\n * you have html content other than buttons inside you must stop the event propagation unless the click originated in the button that\n * add the items to the cart.\n */\n@Component({\n  selector: 'add-to-cart', // tslint:disable-line component-selector\n  template: `<div class=\"add-to-cart\" [ngClass]=\"containerClass\">\n  <div class=\"add-to-cart-component\" [ngClass]=\"position\"\n       *ngIf=\"editorPrecedence === 'before' && hasEditor\">\n    <add-to-cart-editor [type]=\"type\" [dropdown]=\"dropdown\" [(value)]=\"editorQuantity\"></add-to-cart-editor>\n  </div>\n  <div class=\"cart-button-container\" (click)=\"addToCart($event)\">\n    <ng-container *ngIf=\"!custom\">\n      <button type=\"button\" [ngClass]=\"buttonClass\" [disabled]=\"!item\">\n        {{buttonText}}\n      </button>\n    </ng-container>\n    <ng-content *ngIf=\"custom\">\n    </ng-content>\n  </div>\n  <div class=\"add-to-cart-component\" [ngClass]=\"position\"\n       *ngIf=\"editorPrecedence === 'after' && hasEditor\">\n    <add-to-cart-editor [type]=\"type\" [dropdown]=\"dropdown\" [(value)]=\"editorQuantity\"></add-to-cart-editor>\n  </div>\n</div>\n`,\n})\nexport class AddToCartComponent implements OnInit, OnChanges {\n  private _editorQuantity = 1;\n  containerClass: any;\n  hasEditor = false;\n  horizontalEditor = true;\n  editorPrecedence: 'before' | 'after' = 'before';\n  /**\n   * If `false` displays a default button provided by the component, otherwise projects the contents of the component to be used as a\n   * button.\n   */\n  @Input() custom = false;\n  /**\n   * The item that will be added to the cart on click. If no item is provided the button will be disabled unless you use custom buttons.\n   *\n   * If you specify an editor using the type input the quantity of the item might be modified prior to insertion in the service.\n   */\n  @Input() item: CartItem;\n  /**\n   * Changes the default text of the component's button.\n   */\n  @Input() buttonText = 'Add to cart';\n  /**\n   * Changes the default CSS class of the component's button.\n   */\n  @Input() buttonClass = 'add-to-cart-button';\n  /**\n   * Renders a button or a button with an editor to select the quantity of the item that will be added in the cart. When it has a value\n   * other than `'button'` an editor is displayed depending on the selected `[type]`; it can be a `select`, or a text or a number `input`.\n   *\n   * > Do not confuse this input with the html attribute `type`. The default button is always generated with this attribute set to\n   * `button` to prevent accidental form submissions.\n   */\n  @Input() type: AddToCartType = 'button';\n  /**\n   * Sets the position where the editor will be placed. If the `[type]` is set to `'button'` no editor is displayed and this setting has\n   * no effect.\n   */\n  @Input() position: AddToCartPosition = 'left';\n  /**\n   * If `[type]` is set to `'dropdown'` it can be used to set the options of the rendered `select` editor. Is an array of objects with\n   * label and a value properties used to populate the select's `option` elements.\n   */\n  @Input() dropdown: DropdownValue[] = [\n    {label: '1 item', value: 1},\n    {label: '2 items', value: 2},\n    {label: '5 items', value: 5}\n  ];\n  /**\n   * If you use this binding you can easily override the quantity that will be added to the cart when the button is clicked.\n   *\n   * > When the `[type]` is **not** set to `'button'` this binding is ignored and the value from the editor is used instead.\n   */\n  @Input() quantity: number;\n  /**\n   * This event is fired when the component uses an editor and its value is changed by the user.\n   */\n  @Output() change = new EventEmitter<number>();\n  /**\n   * This event is fired when the item is added to the cart.\n   */\n  @Output() added = new EventEmitter<CartItem>();\n\n  get editorQuantity(): number {\n    return this._editorQuantity;\n  }\n\n  set editorQuantity(value: number) {\n    this._editorQuantity = value;\n    this.change.emit(value);\n  }\n\n  constructor(private cartService: CartService<any>) {\n  }\n\n  ngOnInit(): void {\n    this.computeClass();\n  }\n\n  private itemQuantity(): number {\n    if (this.type === 'button') {\n      if (this.quantity) {\n        return this.quantity;\n      }\n      return this.item.getQuantity();\n    } else {\n      return this._editorQuantity;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['type']) {\n      this.hasEditor = changes['type'].currentValue !== 'button';\n      if (changes['type'].currentValue === 'dropdown' && this.dropdown.length) {\n        const quantity = this.itemQuantity();\n        const match = this.dropdown.find(i => i.value === quantity);\n        if (!match) {\n          this._editorQuantity = this.dropdown[0].value;\n        }\n      }\n    }\n    if (changes['position']) {\n      const pos = changes['position'].currentValue;\n      this.horizontalEditor = pos === 'left' || pos === 'right';\n      this.editorPrecedence = pos === 'left' || pos === 'top' ? 'before' : 'after';\n    }\n    this.computeClass();\n  }\n\n  addToCart(evt) {\n    evt.stopPropagation();\n    if (this.item) {\n      const quantity = this.itemQuantity();\n      this.item.setQuantity(quantity);\n      this.cartService.addItem(this.item);\n      this.added.emit(this.item);\n    }\n  }\n\n  computeClass() {\n    this.containerClass = [\n      'add-to-cart-' + this.type,\n      this.horizontalEditor ?\n        'editor-position-horizontal' :\n        'editor-position-vertical'\n    ];\n  }\n\n}\n",
    "/**\r\n * The base class for every unit of information stored in the cart service\r\n * @order 1\r\n */\r\nexport abstract class CartItem {\r\n  /**\r\n   * Returns an unique identifier for your item\r\n   */\r\n  abstract getId(): any;\r\n\r\n  /**\r\n   * Returns the name, a small text describing the item\r\n   */\r\n  abstract getName(): string;\r\n\r\n  /**\r\n   * Return how much a single unit of the item costs\r\n   */\r\n  abstract getPrice(): number;\r\n\r\n  /**\r\n   * Sets how much of this item is ordered\r\n   */\r\n  abstract setQuantity(quantity: number): void;\r\n\r\n  /**\r\n   * Returns how much of this item is ordered\r\n   */\r\n  abstract getQuantity(): number;\r\n\r\n  /**\r\n   * Returns the url of an image for the item\r\n   */\r\n  abstract getImage(): string;\r\n\r\n  /**\r\n   * Return the total cost of the item, that is the price multiplied by the quantity\r\n   */\r\n  public total(): number {\r\n    return this.getPrice() * this.getQuantity();\r\n  }\r\n}\r\n\r\n\r\n",
    "import {EventEmitter} from '@angular/core';\r\n\r\nimport {CartItem} from '../classes/cart-item';\r\nimport {CartChangeEvent} from '../interfaces/cart-change-event';\r\nimport {parseLocaleFormat} from '../locales';\r\nimport {LocaleFormat} from '../interfaces/locale-format';\r\n\r\n/**\r\n * The base class for storing items in your cart\r\n *\r\n * @service\r\n * @note {warning} Do not modify the items `id` after they are added to the cart. Doing so could result in duplicates which can cause\r\n * undefined behaviour\r\n * @order 1\r\n */\r\nexport abstract class CartService<T extends CartItem> {\r\n  private localeFormat: LocaleFormat = parseLocaleFormat('auto');\r\n  private format = 'auto';\r\n  /**\r\n   * Emits an event every time items, tax, shipping cost or currency formats are changed in the cart.\r\n   */\r\n  public onChange: EventEmitter<CartChangeEvent> = new EventEmitter<CartChangeEvent>();\r\n  /**\r\n   * Emits an event every time an item is added to the cart.\r\n   */\r\n  public onItemAdded: EventEmitter<T> = new EventEmitter<T>();\r\n  /**\r\n   * Emits an event every time an item is removed from the cart.\r\n   *\r\n   * > This event only fires when a single item is removed by id. If you want to be notified of any removal (eg: clearing the cart) listen\r\n   * to the `onChange` or the `onItemsChanged` event instead.\r\n   */\r\n  public onItemRemoved: EventEmitter<T> = new EventEmitter<T>();\r\n  /**\r\n   * Emits an event every time an item is added or removed from the cart.\r\n   */\r\n  public onItemsChanged: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  /**\r\n   * Emits an event every time taxes for the cart are changed.\r\n   */\r\n  public onTaxChange: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  /**\r\n   * Emits an event every time shipping costs for the cart are changed.\r\n   */\r\n  public onShippingChange: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  /**\r\n   * Finds an item by id\r\n   */\r\n  public abstract getItem(id: any): T;\r\n\r\n  /**\r\n   * Gets all the items in the cart.\r\n   */\r\n  public abstract getItems(): T[];\r\n\r\n  /**\r\n   * Add a new item to the cart.\r\n   */\r\n  public abstract addItem(item: T): void;\r\n\r\n  /**\r\n   * Remove an item from the cart by id.\r\n   */\r\n  public abstract removeItem(id: any): void;\r\n\r\n  /**\r\n   * Returns the number of unique items in the cart.\r\n   */\r\n  public abstract itemCount(): number;\r\n\r\n  /**\r\n   * Returns the number of items including each item's quantity.\r\n   */\r\n  public abstract entries(): number;\r\n\r\n  /**\r\n   * Returns the total cost of the shopping cart without shipping and taxes.\r\n   */\r\n  public abstract cost(): number;\r\n\r\n  /**\r\n   * Removes all items from the cart.\r\n   */\r\n  public abstract clear(): void;\r\n\r\n  /**\r\n   * Returns if the carts has any items in it.\r\n   */\r\n  public abstract isEmpty(): boolean;\r\n\r\n  /**\r\n   * Returns the shipping cost of the shopping cart.\r\n   */\r\n  public abstract getShipping(): number;\r\n\r\n  /**\r\n   * Sets the shipping cost of the shopping cart.\r\n   */\r\n  public abstract setShipping(shipping: number): void;\r\n\r\n  /**\r\n   * Returns the tax rate of the shopping cart.\r\n   */\r\n  public abstract getTaxRate(): number;\r\n\r\n  /**\r\n   * Sets the tax rate of the shopping cart.\r\n   */\r\n  public abstract setTaxRate(tax: number): void;\r\n\r\n  /**\r\n   * Returns the tax computation of the shopping cart.\r\n   */\r\n  public getTax(): number {\r\n    return this.cost() * (this.getTaxRate() / 100);\r\n  }\r\n\r\n  /**\r\n   * Returns the total cost of the shopping cart including shipping and taxes.\r\n   */\r\n  public totalCost(): number {\r\n    return this.cost() + this.getTax() + this.getShipping();\r\n  }\r\n\r\n  /**\r\n   * Changes the currency symbol and number format for all components associated to this service instance.\r\n   *\r\n   * Check the Angular `CurrencyPipe` and the Internationalization guide for more info.\r\n   */\r\n  public setLocaleFormat(format: string) {\r\n    this.localeFormat = parseLocaleFormat(format);\r\n    this.format = format;\r\n    this.onChange.emit({change: 'format', value: this.format});\r\n  }\r\n\r\n  /**\r\n   * Returns the currency format as set with `setCurrencyFormat` or `'auto'` if no value is set.\r\n   *\r\n   * Passing true as parameter will return an object instead of a string.\r\n   */\r\n  public getLocaleFormat(object: boolean = false): string | LocaleFormat {\r\n    return object ? this.localeFormat : this.format;\r\n  }\r\n\r\n  /**\r\n   * Returns an object with all the cart information in it, useful for serialization of the cart.\r\n   */\r\n  public toObject(): any {\r\n    return {\r\n      taxRate: this.getTaxRate(),\r\n      shipping: this.getShipping(),\r\n      items: this.getItems()\r\n    };\r\n  }\r\n}\r\n",
    "import {LocaleFormat} from './interfaces/locale-format';\r\n\r\n/**\r\n * Converts a string into an object with all currency display options as properties.\r\n */\r\nexport function parseLocaleFormat(format: string): LocaleFormat {\r\n  if (!format) {\r\n    throw new Error('Invalid format for currency. Expected a non empty string');\r\n  }\r\n  const res: LocaleFormat = {currencyCode: undefined, display: 'symbol', digitsInfo: undefined, locale: undefined};\r\n  const props = ['currencyCode', 'display', 'digitsInfo', 'locale'];\r\n  const parts = format.split(':');\r\n  const partsLength = parts.length;\r\n\r\n  if (partsLength > 4) {\r\n    throw new Error(`Invalid format for currency. Expected a value in the form ${props.join(':')} and got ${format}`);\r\n  }\r\n\r\n  parts.forEach((p, idx) => {\r\n    let value = p;\r\n    if (value === 'auto') {\r\n      value = idx === 1 ? 'symbol' : undefined;\r\n    }\r\n    res[props[idx]] = value;\r\n  });\r\n\r\n  return res;\r\n}\r\n\r\n",
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n"
  ],
  "names": [
    "HttpClientModule",
    "CommonModule",
    "NgModule",
    "Inject",
    "LOCALE_ID",
    "Pipe",
    "CurrencyPipe",
    "tslib_1.__extends",
    "Injectable",
    "InjectionToken",
    "Input",
    "ViewContainerRef",
    "Directive",
    "ComponentFactoryResolver",
    "NgModuleRef",
    "Component",
    "Output",
    "EventEmitter",
    "HttpClient",
    "HttpRequest",
    "HttpParams",
    "getLocaleCurrencyName"
  ],
  "mappings": "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"
}
